/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ERC721BaseCollectionV2 {
  export type ItemStruct = {
    rarity: PromiseOrValue<string>;
    maxSupply: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    beneficiary: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
    contentHash: PromiseOrValue<BytesLike>;
  };

  export type ItemStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    rarity: string;
    maxSupply: BigNumber;
    totalSupply: BigNumber;
    price: BigNumber;
    beneficiary: string;
    metadata: string;
    contentHash: string;
  };

  export type ItemParamStruct = {
    rarity: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    beneficiary: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
  };

  export type ItemParamStructOutput = [string, BigNumber, string, string] & {
    rarity: string;
    price: BigNumber;
    beneficiary: string;
    metadata: string;
  };
}

export interface ERC721CollectionV2Interface extends utils.Interface {
  functions: {
    "COLLECTION_HASH()": FunctionFragment;
    "ISSUED_ID_BITS()": FunctionFragment;
    "ITEM_ID_BITS()": FunctionFragment;
    "MAX_ISSUED_ID()": FunctionFragment;
    "MAX_ITEM_ID()": FunctionFragment;
    "addItems((string,uint256,address,string)[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "batchTransferFrom(address,address,uint256[])": FunctionFragment;
    "completeCollection()": FunctionFragment;
    "createdAt()": FunctionFragment;
    "creator()": FunctionFragment;
    "decodeTokenId(uint256)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "editItemsData(uint256[],uint256[],address[],string[])": FunctionFragment;
    "encodeTokenId(uint256,uint256)": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "globalManagers(address)": FunctionFragment;
    "globalMinters(address)": FunctionFragment;
    "initialize(string,string,string,address,bool,bool,address,(string,uint256,address,string)[])": FunctionFragment;
    "isApproved()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isCompleted()": FunctionFragment;
    "isEditable()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isMintingAllowed()": FunctionFragment;
    "issueTokens(address[],uint256[])": FunctionFragment;
    "itemManagers(uint256,address)": FunctionFragment;
    "itemMinters(uint256,address)": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "itemsCount()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "rarities()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueItems(uint256[],bytes32[],string[])": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setApproved(bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setEditable(bool)": FunctionFragment;
    "setItemsManagers(uint256[],address[],bool[])": FunctionFragment;
    "setItemsMinters(uint256[],address[],uint256[])": FunctionFragment;
    "setManagers(address[],bool[])": FunctionFragment;
    "setMinters(address[],bool[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferCreatorship(address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COLLECTION_HASH"
      | "ISSUED_ID_BITS"
      | "ITEM_ID_BITS"
      | "MAX_ISSUED_ID"
      | "MAX_ITEM_ID"
      | "addItems"
      | "approve"
      | "balanceOf"
      | "baseURI"
      | "batchTransferFrom"
      | "completeCollection"
      | "createdAt"
      | "creator"
      | "decodeTokenId"
      | "domainSeparator"
      | "editItemsData"
      | "encodeTokenId"
      | "executeMetaTransaction"
      | "getApproved"
      | "getChainId"
      | "getNonce"
      | "globalManagers"
      | "globalMinters"
      | "initialize"
      | "isApproved"
      | "isApprovedForAll"
      | "isCompleted"
      | "isEditable"
      | "isInitialized"
      | "isMintingAllowed"
      | "issueTokens"
      | "itemManagers"
      | "itemMinters"
      | "items"
      | "itemsCount"
      | "name"
      | "owner"
      | "ownerOf"
      | "rarities"
      | "renounceOwnership"
      | "rescueItems"
      | "safeBatchTransferFrom"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setApproved"
      | "setBaseURI"
      | "setEditable"
      | "setItemsManagers"
      | "setItemsMinters"
      | "setManagers"
      | "setMinters"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferCreatorship"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COLLECTION_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUED_ID_BITS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ITEM_ID_BITS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ISSUED_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ITEM_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addItems",
    values: [ERC721BaseCollectionV2.ItemParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "completeCollection",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editItemsData",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTokenId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalManagers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalMinters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      ERC721BaseCollectionV2.ItemParamStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCompleted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEditable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMintingAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokens",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "itemManagers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "itemMinters",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "items",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "itemsCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "rarities", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueItems",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproved",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEditable",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setItemsManagers",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setItemsMinters",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagers",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinters",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferCreatorship",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "COLLECTION_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ISSUED_ID_BITS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ITEM_ID_BITS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ISSUED_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ITEM_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addItems", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editItemsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEditable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMintingAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemsCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rarities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEditable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setItemsManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setItemsMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCreatorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddItem(uint256,tuple)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BaseURI(string,string)": EventFragment;
    "Complete()": EventFragment;
    "CreatorshipTransferred(address,address)": EventFragment;
    "Issue(address,uint256,uint256,uint256,address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RescueItem(uint256,bytes32,string)": EventFragment;
    "SetApproved(bool,bool)": EventFragment;
    "SetEditable(bool,bool)": EventFragment;
    "SetGlobalManager(address,bool)": EventFragment;
    "SetGlobalMinter(address,bool)": EventFragment;
    "SetItemManager(uint256,address,bool)": EventFragment;
    "SetItemMinter(uint256,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateItemData(uint256,uint256,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Complete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorshipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RescueItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEditable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGlobalManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGlobalMinter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetItemManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetItemMinter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateItemData"): EventFragment;
}

export interface AddItemEventObject {
  _itemId: BigNumber;
  _item: ERC721BaseCollectionV2.ItemStructOutput;
}
export type AddItemEvent = TypedEvent<
  [BigNumber, ERC721BaseCollectionV2.ItemStructOutput],
  AddItemEventObject
>;

export type AddItemEventFilter = TypedEventFilter<AddItemEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BaseURIEventObject {
  _oldBaseURI: string;
  _newBaseURI: string;
}
export type BaseURIEvent = TypedEvent<[string, string], BaseURIEventObject>;

export type BaseURIEventFilter = TypedEventFilter<BaseURIEvent>;

export interface CompleteEventObject {}
export type CompleteEvent = TypedEvent<[], CompleteEventObject>;

export type CompleteEventFilter = TypedEventFilter<CompleteEvent>;

export interface CreatorshipTransferredEventObject {
  _previousCreator: string;
  _newCreator: string;
}
export type CreatorshipTransferredEvent = TypedEvent<
  [string, string],
  CreatorshipTransferredEventObject
>;

export type CreatorshipTransferredEventFilter =
  TypedEventFilter<CreatorshipTransferredEvent>;

export interface IssueEventObject {
  _beneficiary: string;
  _tokenId: BigNumber;
  _itemId: BigNumber;
  _issuedId: BigNumber;
  _caller: string;
}
export type IssueEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  IssueEventObject
>;

export type IssueEventFilter = TypedEventFilter<IssueEvent>;

export interface MetaTransactionExecutedEventObject {
  userAddress: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RescueItemEventObject {
  _itemId: BigNumber;
  _contentHash: string;
  _metadata: string;
}
export type RescueItemEvent = TypedEvent<
  [BigNumber, string, string],
  RescueItemEventObject
>;

export type RescueItemEventFilter = TypedEventFilter<RescueItemEvent>;

export interface SetApprovedEventObject {
  _previousValue: boolean;
  _newValue: boolean;
}
export type SetApprovedEvent = TypedEvent<
  [boolean, boolean],
  SetApprovedEventObject
>;

export type SetApprovedEventFilter = TypedEventFilter<SetApprovedEvent>;

export interface SetEditableEventObject {
  _previousValue: boolean;
  _newValue: boolean;
}
export type SetEditableEvent = TypedEvent<
  [boolean, boolean],
  SetEditableEventObject
>;

export type SetEditableEventFilter = TypedEventFilter<SetEditableEvent>;

export interface SetGlobalManagerEventObject {
  _manager: string;
  _value: boolean;
}
export type SetGlobalManagerEvent = TypedEvent<
  [string, boolean],
  SetGlobalManagerEventObject
>;

export type SetGlobalManagerEventFilter =
  TypedEventFilter<SetGlobalManagerEvent>;

export interface SetGlobalMinterEventObject {
  _minter: string;
  _value: boolean;
}
export type SetGlobalMinterEvent = TypedEvent<
  [string, boolean],
  SetGlobalMinterEventObject
>;

export type SetGlobalMinterEventFilter = TypedEventFilter<SetGlobalMinterEvent>;

export interface SetItemManagerEventObject {
  _itemId: BigNumber;
  _manager: string;
  _value: boolean;
}
export type SetItemManagerEvent = TypedEvent<
  [BigNumber, string, boolean],
  SetItemManagerEventObject
>;

export type SetItemManagerEventFilter = TypedEventFilter<SetItemManagerEvent>;

export interface SetItemMinterEventObject {
  _itemId: BigNumber;
  _minter: string;
  _value: BigNumber;
}
export type SetItemMinterEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SetItemMinterEventObject
>;

export type SetItemMinterEventFilter = TypedEventFilter<SetItemMinterEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateItemDataEventObject {
  _itemId: BigNumber;
  _price: BigNumber;
  _beneficiary: string;
  _metadata: string;
}
export type UpdateItemDataEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  UpdateItemDataEventObject
>;

export type UpdateItemDataEventFilter = TypedEventFilter<UpdateItemDataEvent>;

export interface ERC721CollectionV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721CollectionV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COLLECTION_HASH(overrides?: CallOverrides): Promise<[string]>;

    ISSUED_ID_BITS(overrides?: CallOverrides): Promise<[number]>;

    ITEM_ID_BITS(overrides?: CallOverrides): Promise<[number]>;

    MAX_ISSUED_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ITEM_ID(overrides?: CallOverrides): Promise<[number]>;

    addItems(
      _items: ERC721BaseCollectionV2.ItemParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    batchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeCollection(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createdAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    decodeTokenId(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { itemId: BigNumber; issuedId: BigNumber }
    >;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    editItemsData(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _beneficiaries: PromiseOrValue<string>[],
      _metadatas: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encodeTokenId(
      _itemId: PromiseOrValue<BigNumberish>,
      _issuedId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    globalManagers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    globalMinters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _shouldComplete: PromiseOrValue<boolean>,
      _isApproved: PromiseOrValue<boolean>,
      _rarities: PromiseOrValue<string>,
      _items: ERC721BaseCollectionV2.ItemParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApproved(overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCompleted(overrides?: CallOverrides): Promise<[boolean]>;

    isEditable(overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isMintingAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    issueTokens(
      _beneficiaries: PromiseOrValue<string>[],
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    itemManagers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    itemMinters(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string, string] & {
        rarity: string;
        maxSupply: BigNumber;
        totalSupply: BigNumber;
        price: BigNumber;
        beneficiary: string;
        metadata: string;
        contentHash: string;
      }
    >;

    itemsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rarities(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueItems(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _contentHashes: PromiseOrValue<BytesLike>[],
      _metadatas: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApproved(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEditable(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setItemsManagers(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _managers: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setItemsMinters(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _minters: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManagers(
      _managers: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferCreatorship(
      _newCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  COLLECTION_HASH(overrides?: CallOverrides): Promise<string>;

  ISSUED_ID_BITS(overrides?: CallOverrides): Promise<number>;

  ITEM_ID_BITS(overrides?: CallOverrides): Promise<number>;

  MAX_ISSUED_ID(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ITEM_ID(overrides?: CallOverrides): Promise<number>;

  addItems(
    _items: ERC721BaseCollectionV2.ItemParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  batchTransferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeCollection(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createdAt(overrides?: CallOverrides): Promise<BigNumber>;

  creator(overrides?: CallOverrides): Promise<string>;

  decodeTokenId(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { itemId: BigNumber; issuedId: BigNumber }
  >;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  editItemsData(
    _itemIds: PromiseOrValue<BigNumberish>[],
    _prices: PromiseOrValue<BigNumberish>[],
    _beneficiaries: PromiseOrValue<string>[],
    _metadatas: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encodeTokenId(
    _itemId: PromiseOrValue<BigNumberish>,
    _issuedId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeMetaTransaction(
    userAddress: PromiseOrValue<string>,
    functionSignature: PromiseOrValue<BytesLike>,
    sigR: PromiseOrValue<BytesLike>,
    sigS: PromiseOrValue<BytesLike>,
    sigV: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getNonce(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalManagers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  globalMinters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _baseURI: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    _shouldComplete: PromiseOrValue<boolean>,
    _isApproved: PromiseOrValue<boolean>,
    _rarities: PromiseOrValue<string>,
    _items: ERC721BaseCollectionV2.ItemParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApproved(overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCompleted(overrides?: CallOverrides): Promise<boolean>;

  isEditable(overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isMintingAllowed(overrides?: CallOverrides): Promise<boolean>;

  issueTokens(
    _beneficiaries: PromiseOrValue<string>[],
    _itemIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  itemManagers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  itemMinters(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  items(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, string, string] & {
      rarity: string;
      maxSupply: BigNumber;
      totalSupply: BigNumber;
      price: BigNumber;
      beneficiary: string;
      metadata: string;
      contentHash: string;
    }
  >;

  itemsCount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rarities(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueItems(
    _itemIds: PromiseOrValue<BigNumberish>[],
    _contentHashes: PromiseOrValue<BytesLike>[],
    _metadatas: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApproved(
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEditable(
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setItemsManagers(
    _itemIds: PromiseOrValue<BigNumberish>[],
    _managers: PromiseOrValue<string>[],
    _values: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setItemsMinters(
    _itemIds: PromiseOrValue<BigNumberish>[],
    _minters: PromiseOrValue<string>[],
    _values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManagers(
    _managers: PromiseOrValue<string>[],
    _values: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinters(
    _minters: PromiseOrValue<string>[],
    _values: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferCreatorship(
    _newCreator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COLLECTION_HASH(overrides?: CallOverrides): Promise<string>;

    ISSUED_ID_BITS(overrides?: CallOverrides): Promise<number>;

    ITEM_ID_BITS(overrides?: CallOverrides): Promise<number>;

    MAX_ISSUED_ID(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ITEM_ID(overrides?: CallOverrides): Promise<number>;

    addItems(
      _items: ERC721BaseCollectionV2.ItemParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    batchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    completeCollection(overrides?: CallOverrides): Promise<void>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<string>;

    decodeTokenId(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { itemId: BigNumber; issuedId: BigNumber }
    >;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    editItemsData(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _beneficiaries: PromiseOrValue<string>[],
      _metadatas: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    encodeTokenId(
      _itemId: PromiseOrValue<BigNumberish>,
      _issuedId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalManagers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    globalMinters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _shouldComplete: PromiseOrValue<boolean>,
      _isApproved: PromiseOrValue<boolean>,
      _rarities: PromiseOrValue<string>,
      _items: ERC721BaseCollectionV2.ItemParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    isApproved(overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCompleted(overrides?: CallOverrides): Promise<boolean>;

    isEditable(overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isMintingAllowed(overrides?: CallOverrides): Promise<boolean>;

    issueTokens(
      _beneficiaries: PromiseOrValue<string>[],
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    itemManagers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    itemMinters(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string, string] & {
        rarity: string;
        maxSupply: BigNumber;
        totalSupply: BigNumber;
        price: BigNumber;
        beneficiary: string;
        metadata: string;
        contentHash: string;
      }
    >;

    itemsCount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rarities(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueItems(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _contentHashes: PromiseOrValue<BytesLike>[],
      _metadatas: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApproved(
      _value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEditable(
      _value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setItemsManagers(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _managers: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setItemsMinters(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _minters: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setManagers(
      _managers: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferCreatorship(
      _newCreator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddItem(uint256,tuple)"(
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _item?: null
    ): AddItemEventFilter;
    AddItem(
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _item?: null
    ): AddItemEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BaseURI(string,string)"(
      _oldBaseURI?: null,
      _newBaseURI?: null
    ): BaseURIEventFilter;
    BaseURI(_oldBaseURI?: null, _newBaseURI?: null): BaseURIEventFilter;

    "Complete()"(): CompleteEventFilter;
    Complete(): CompleteEventFilter;

    "CreatorshipTransferred(address,address)"(
      _previousCreator?: PromiseOrValue<string> | null,
      _newCreator?: PromiseOrValue<string> | null
    ): CreatorshipTransferredEventFilter;
    CreatorshipTransferred(
      _previousCreator?: PromiseOrValue<string> | null,
      _newCreator?: PromiseOrValue<string> | null
    ): CreatorshipTransferredEventFilter;

    "Issue(address,uint256,uint256,uint256,address)"(
      _beneficiary?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _issuedId?: null,
      _caller?: null
    ): IssueEventFilter;
    Issue(
      _beneficiary?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _issuedId?: null,
      _caller?: null
    ): IssueEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RescueItem(uint256,bytes32,string)"(
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _contentHash?: null,
      _metadata?: null
    ): RescueItemEventFilter;
    RescueItem(
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _contentHash?: null,
      _metadata?: null
    ): RescueItemEventFilter;

    "SetApproved(bool,bool)"(
      _previousValue?: null,
      _newValue?: null
    ): SetApprovedEventFilter;
    SetApproved(
      _previousValue?: null,
      _newValue?: null
    ): SetApprovedEventFilter;

    "SetEditable(bool,bool)"(
      _previousValue?: null,
      _newValue?: null
    ): SetEditableEventFilter;
    SetEditable(
      _previousValue?: null,
      _newValue?: null
    ): SetEditableEventFilter;

    "SetGlobalManager(address,bool)"(
      _manager?: PromiseOrValue<string> | null,
      _value?: null
    ): SetGlobalManagerEventFilter;
    SetGlobalManager(
      _manager?: PromiseOrValue<string> | null,
      _value?: null
    ): SetGlobalManagerEventFilter;

    "SetGlobalMinter(address,bool)"(
      _minter?: PromiseOrValue<string> | null,
      _value?: null
    ): SetGlobalMinterEventFilter;
    SetGlobalMinter(
      _minter?: PromiseOrValue<string> | null,
      _value?: null
    ): SetGlobalMinterEventFilter;

    "SetItemManager(uint256,address,bool)"(
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _manager?: PromiseOrValue<string> | null,
      _value?: null
    ): SetItemManagerEventFilter;
    SetItemManager(
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _manager?: PromiseOrValue<string> | null,
      _value?: null
    ): SetItemManagerEventFilter;

    "SetItemMinter(uint256,address,uint256)"(
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _minter?: PromiseOrValue<string> | null,
      _value?: null
    ): SetItemMinterEventFilter;
    SetItemMinter(
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _minter?: PromiseOrValue<string> | null,
      _value?: null
    ): SetItemMinterEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "UpdateItemData(uint256,uint256,address,string)"(
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _price?: null,
      _beneficiary?: null,
      _metadata?: null
    ): UpdateItemDataEventFilter;
    UpdateItemData(
      _itemId?: PromiseOrValue<BigNumberish> | null,
      _price?: null,
      _beneficiary?: null,
      _metadata?: null
    ): UpdateItemDataEventFilter;
  };

  estimateGas: {
    COLLECTION_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    ISSUED_ID_BITS(overrides?: CallOverrides): Promise<BigNumber>;

    ITEM_ID_BITS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ISSUED_ID(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ITEM_ID(overrides?: CallOverrides): Promise<BigNumber>;

    addItems(
      _items: ERC721BaseCollectionV2.ItemParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    batchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeCollection(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    decodeTokenId(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    editItemsData(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _beneficiaries: PromiseOrValue<string>[],
      _metadatas: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encodeTokenId(
      _itemId: PromiseOrValue<BigNumberish>,
      _issuedId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalManagers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalMinters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _shouldComplete: PromiseOrValue<boolean>,
      _isApproved: PromiseOrValue<boolean>,
      _rarities: PromiseOrValue<string>,
      _items: ERC721BaseCollectionV2.ItemParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApproved(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCompleted(overrides?: CallOverrides): Promise<BigNumber>;

    isEditable(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isMintingAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    issueTokens(
      _beneficiaries: PromiseOrValue<string>[],
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    itemManagers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemMinters(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemsCount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rarities(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueItems(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _contentHashes: PromiseOrValue<BytesLike>[],
      _metadatas: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApproved(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEditable(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setItemsManagers(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _managers: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setItemsMinters(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _minters: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManagers(
      _managers: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferCreatorship(
      _newCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COLLECTION_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ISSUED_ID_BITS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ITEM_ID_BITS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ISSUED_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ITEM_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addItems(
      _items: ERC721BaseCollectionV2.ItemParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeCollection(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createdAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeTokenId(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editItemsData(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _beneficiaries: PromiseOrValue<string>[],
      _metadatas: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encodeTokenId(
      _itemId: PromiseOrValue<BigNumberish>,
      _issuedId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalManagers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalMinters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _baseURI: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _shouldComplete: PromiseOrValue<boolean>,
      _isApproved: PromiseOrValue<boolean>,
      _rarities: PromiseOrValue<string>,
      _items: ERC721BaseCollectionV2.ItemParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApproved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCompleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEditable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMintingAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issueTokens(
      _beneficiaries: PromiseOrValue<string>[],
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    itemManagers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemMinters(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rarities(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueItems(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _contentHashes: PromiseOrValue<BytesLike>[],
      _metadatas: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApproved(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEditable(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setItemsManagers(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _managers: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setItemsMinters(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _minters: PromiseOrValue<string>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManagers(
      _managers: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferCreatorship(
      _newCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
