/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface DCLRegistrarInterface extends Interface {
  functions: {
    ERC721_RECEIVED: TypedFunctionDescription<{ encode([]: []): string }>;

    addController: TypedFunctionDescription<{
      encode([controller]: [string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([to, tokenId]: [string, BigNumberish]): string;
    }>;

    available: TypedFunctionDescription<{
      encode([_subdomain]: [string]): string;
    }>;

    balanceOf: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    base: TypedFunctionDescription<{ encode([]: []): string }>;

    baseURI: TypedFunctionDescription<{ encode([]: []): string }>;

    controllers: TypedFunctionDescription<{ encode([]: [string]): string }>;

    domain: TypedFunctionDescription<{ encode([]: []): string }>;

    domainNameHash: TypedFunctionDescription<{ encode([]: []): string }>;

    getApproved: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    getOwnerOf: TypedFunctionDescription<{
      encode([_subdomain]: [string]): string;
    }>;

    getTokenId: TypedFunctionDescription<{
      encode([_subdomain]: [string]): string;
    }>;

    isApprovedForAll: TypedFunctionDescription<{
      encode([owner, operator]: [string, string]): string;
    }>;

    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    migrateNames: TypedFunctionDescription<{
      encode([_names, _beneficiaries, _createdDates]: [
        Arrayish[],
        string[],
        BigNumberish[]
      ]): string;
    }>;

    migrated: TypedFunctionDescription<{ encode([]: []): string }>;

    migrationFinished: TypedFunctionDescription<{ encode([]: []): string }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    onERC721Received: TypedFunctionDescription<{
      encode([, , _tokenId]: [string, string, BigNumberish, Arrayish]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    ownerOf: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    reclaim: TypedFunctionDescription<{
      encode([_tokenId, _owner]: [BigNumberish, string]): string;
    }>;

    reclaimDomain: TypedFunctionDescription<{
      encode([_tokenId]: [BigNumberish]): string;
    }>;

    register: TypedFunctionDescription<{
      encode([_subdomain, _beneficiary]: [string, string]): string;
    }>;

    registry: TypedFunctionDescription<{ encode([]: []): string }>;

    removeController: TypedFunctionDescription<{
      encode([controller]: [string]): string;
    }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    safeTransferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string;
    }>;

    setApprovalForAll: TypedFunctionDescription<{
      encode([to, approved]: [string, boolean]): string;
    }>;

    subdomains: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceId]: [Arrayish]): string;
    }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    tokenByIndex: TypedFunctionDescription<{
      encode([index]: [BigNumberish]): string;
    }>;

    tokenOfOwnerByIndex: TypedFunctionDescription<{
      encode([owner, index]: [string, BigNumberish]): string;
    }>;

    tokenURI: TypedFunctionDescription<{
      encode([_tokenId]: [BigNumberish]): string;
    }>;

    topdomain: TypedFunctionDescription<{ encode([]: []): string }>;

    topdomainNameHash: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transferDomainOwnership: TypedFunctionDescription<{
      encode([_owner, _tokenId]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    updateBase: TypedFunctionDescription<{ encode([_base]: [string]): string }>;

    updateBaseURI: TypedFunctionDescription<{
      encode([_baseURI]: [string]): string;
    }>;

    updateRegistry: TypedFunctionDescription<{
      encode([_registry]: [string]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, approved, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    ApprovalForAll: TypedEventDescription<{
      encodeTopics([owner, operator, approved]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    BaseURI: TypedEventDescription<{
      encodeTopics([_oldBaseURI, _newBaseURI]: [null, null]): string[];
    }>;

    BaseUpdated: TypedEventDescription<{
      encodeTopics([_previousBase, _newBase]: [
        string | null,
        string | null
      ]): string[];
    }>;

    ControllerAdded: TypedEventDescription<{
      encodeTopics([_controller]: [string | null]): string[];
    }>;

    ControllerRemoved: TypedEventDescription<{
      encodeTopics([_controller]: [string | null]): string[];
    }>;

    DomainReclaimed: TypedEventDescription<{
      encodeTopics([_tokenId]: [BigNumberish | null]): string[];
    }>;

    DomainTransferred: TypedEventDescription<{
      encodeTopics([_newOwner, _tokenId]: [
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    MigrationFinished: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    NameRegistered: TypedEventDescription<{
      encodeTopics([
        _caller,
        _beneficiary,
        _labelHash,
        _subdomain,
        _createdDate,
      ]: [string | null, string | null, Arrayish | null, null, null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    Reclaimed: TypedEventDescription<{
      encodeTopics([_caller, _owner, _tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    RegistryUpdated: TypedEventDescription<{
      encodeTopics([_previousRegistry, _newRegistry]: [
        string | null,
        string | null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;
  };
}

export class DCLRegistrar extends Contract {
  connect(signerOrProvider: Signer | Provider | string): DCLRegistrar;
  attach(addressOrName: string): DCLRegistrar;
  deployed(): Promise<DCLRegistrar>;

  on(event: EventFilter | string, listener: Listener): DCLRegistrar;
  once(event: EventFilter | string, listener: Listener): DCLRegistrar;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): DCLRegistrar;
  removeAllListeners(eventName: EventFilter | string): DCLRegistrar;
  removeListener(eventName: any, listener: Listener): DCLRegistrar;

  interface: DCLRegistrarInterface;

  functions: {
    ERC721_RECEIVED(overrides?: UnsignedTransaction): Promise<string>;

    "ERC721_RECEIVED()"(overrides?: UnsignedTransaction): Promise<string>;

    addController(
      controller: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "addController(address)"(
      controller: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    available(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "available(string)"(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    balanceOf(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    base(overrides?: UnsignedTransaction): Promise<string>;

    "base()"(overrides?: UnsignedTransaction): Promise<string>;

    baseURI(overrides?: UnsignedTransaction): Promise<string>;

    "baseURI()"(overrides?: UnsignedTransaction): Promise<string>;

    controllers(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "controllers(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    domain(overrides?: UnsignedTransaction): Promise<string>;

    "domain()"(overrides?: UnsignedTransaction): Promise<string>;

    domainNameHash(overrides?: UnsignedTransaction): Promise<string>;

    "domainNameHash()"(overrides?: UnsignedTransaction): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getOwnerOf(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getOwnerOf(string)"(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getTokenId(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTokenId(string)"(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    isOwner(overrides?: UnsignedTransaction): Promise<boolean>;

    "isOwner()"(overrides?: UnsignedTransaction): Promise<boolean>;

    migrateNames(
      _names: Arrayish[],
      _beneficiaries: string[],
      _createdDates: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "migrateNames(bytes32[],address[],uint256[])"(
      _names: Arrayish[],
      _beneficiaries: string[],
      _createdDates: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    migrated(overrides?: UnsignedTransaction): Promise<boolean>;

    "migrated()"(overrides?: UnsignedTransaction): Promise<boolean>;

    migrationFinished(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "migrationFinished()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    name(overrides?: UnsignedTransaction): Promise<string>;

    "name()"(overrides?: UnsignedTransaction): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    reclaim(
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "reclaim(uint256,address)"(
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    reclaimDomain(
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "reclaimDomain(uint256)"(
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    register(
      _subdomain: string,
      _beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "register(string,address)"(
      _subdomain: string,
      _beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    registry(overrides?: UnsignedTransaction): Promise<string>;

    "registry()"(overrides?: UnsignedTransaction): Promise<string>;

    removeController(
      controller: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "removeController(address)"(
      controller: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    subdomains(
      arg0: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "subdomains(bytes32)"(
      arg0: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    supportsInterface(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    symbol(overrides?: UnsignedTransaction): Promise<string>;

    "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    topdomain(overrides?: UnsignedTransaction): Promise<string>;

    "topdomain()"(overrides?: UnsignedTransaction): Promise<string>;

    topdomainNameHash(overrides?: UnsignedTransaction): Promise<string>;

    "topdomainNameHash()"(overrides?: UnsignedTransaction): Promise<string>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transferDomainOwnership(
      _owner: string,
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferDomainOwnership(address,uint256)"(
      _owner: string,
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    updateBase(
      _base: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "updateBase(address)"(
      _base: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    updateBaseURI(
      _baseURI: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "updateBaseURI(string)"(
      _baseURI: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    updateRegistry(
      _registry: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "updateRegistry(address)"(
      _registry: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  ERC721_RECEIVED(overrides?: UnsignedTransaction): Promise<string>;

  "ERC721_RECEIVED()"(overrides?: UnsignedTransaction): Promise<string>;

  addController(
    controller: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "addController(address)"(
    controller: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  available(
    _subdomain: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "available(string)"(
    _subdomain: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  balanceOf(owner: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  base(overrides?: UnsignedTransaction): Promise<string>;

  "base()"(overrides?: UnsignedTransaction): Promise<string>;

  baseURI(overrides?: UnsignedTransaction): Promise<string>;

  "baseURI()"(overrides?: UnsignedTransaction): Promise<string>;

  controllers(arg0: string, overrides?: UnsignedTransaction): Promise<boolean>;

  "controllers(address)"(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  domain(overrides?: UnsignedTransaction): Promise<string>;

  "domain()"(overrides?: UnsignedTransaction): Promise<string>;

  domainNameHash(overrides?: UnsignedTransaction): Promise<string>;

  "domainNameHash()"(overrides?: UnsignedTransaction): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getOwnerOf(
    _subdomain: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getOwnerOf(string)"(
    _subdomain: string,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getTokenId(
    _subdomain: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getTokenId(string)"(
    _subdomain: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  isOwner(overrides?: UnsignedTransaction): Promise<boolean>;

  "isOwner()"(overrides?: UnsignedTransaction): Promise<boolean>;

  migrateNames(
    _names: Arrayish[],
    _beneficiaries: string[],
    _createdDates: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "migrateNames(bytes32[],address[],uint256[])"(
    _names: Arrayish[],
    _beneficiaries: string[],
    _createdDates: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  migrated(overrides?: UnsignedTransaction): Promise<boolean>;

  "migrated()"(overrides?: UnsignedTransaction): Promise<boolean>;

  migrationFinished(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "migrationFinished()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  name(overrides?: UnsignedTransaction): Promise<string>;

  "name()"(overrides?: UnsignedTransaction): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    _tokenId: BigNumberish,
    arg3: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    _tokenId: BigNumberish,
    arg3: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  ownerOf(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  reclaim(
    _tokenId: BigNumberish,
    _owner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "reclaim(uint256,address)"(
    _tokenId: BigNumberish,
    _owner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  reclaimDomain(
    _tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "reclaimDomain(uint256)"(
    _tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  register(
    _subdomain: string,
    _beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "register(string,address)"(
    _subdomain: string,
    _beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  registry(overrides?: UnsignedTransaction): Promise<string>;

  "registry()"(overrides?: UnsignedTransaction): Promise<string>;

  removeController(
    controller: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "removeController(address)"(
    controller: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    to: string,
    approved: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    to: string,
    approved: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  subdomains(arg0: Arrayish, overrides?: UnsignedTransaction): Promise<string>;

  "subdomains(bytes32)"(
    arg0: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  supportsInterface(
    interfaceId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  symbol(overrides?: UnsignedTransaction): Promise<string>;

  "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  tokenURI(
    _tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "tokenURI(uint256)"(
    _tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  topdomain(overrides?: UnsignedTransaction): Promise<string>;

  "topdomain()"(overrides?: UnsignedTransaction): Promise<string>;

  topdomainNameHash(overrides?: UnsignedTransaction): Promise<string>;

  "topdomainNameHash()"(overrides?: UnsignedTransaction): Promise<string>;

  totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  transferDomainOwnership(
    _owner: string,
    _tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferDomainOwnership(address,uint256)"(
    _owner: string,
    _tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  updateBase(
    _base: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "updateBase(address)"(
    _base: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  updateBaseURI(
    _baseURI: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "updateBaseURI(string)"(
    _baseURI: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  updateRegistry(
    _registry: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "updateRegistry(address)"(
    _registry: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    BaseURI(_oldBaseURI: null, _newBaseURI: null): EventFilter;

    BaseUpdated(
      _previousBase: string | null,
      _newBase: string | null
    ): EventFilter;

    ControllerAdded(_controller: string | null): EventFilter;

    ControllerRemoved(_controller: string | null): EventFilter;

    DomainReclaimed(_tokenId: BigNumberish | null): EventFilter;

    DomainTransferred(
      _newOwner: string | null,
      _tokenId: BigNumberish | null
    ): EventFilter;

    MigrationFinished(): EventFilter;

    NameRegistered(
      _caller: string | null,
      _beneficiary: string | null,
      _labelHash: Arrayish | null,
      _subdomain: null,
      _createdDate: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Reclaimed(
      _caller: string | null,
      _owner: string | null,
      _tokenId: BigNumberish | null
    ): EventFilter;

    RegistryUpdated(
      _previousRegistry: string | null,
      _newRegistry: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    ERC721_RECEIVED(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "ERC721_RECEIVED()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    addController(
      controller: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "addController(address)"(
      controller: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    available(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "available(string)"(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    balanceOf(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    base(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "base()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    baseURI(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "baseURI()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    controllers(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "controllers(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    domain(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "domain()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    domainNameHash(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "domainNameHash()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getOwnerOf(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getOwnerOf(string)"(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getTokenId(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getTokenId(string)"(
      _subdomain: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    isOwner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "isOwner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    migrateNames(
      _names: Arrayish[],
      _beneficiaries: string[],
      _createdDates: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "migrateNames(bytes32[],address[],uint256[])"(
      _names: Arrayish[],
      _beneficiaries: string[],
      _createdDates: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    migrated(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "migrated()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    migrationFinished(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "migrationFinished()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    name(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "name()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      _tokenId: BigNumberish,
      arg3: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    reclaim(
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "reclaim(uint256,address)"(
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    reclaimDomain(
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "reclaimDomain(uint256)"(
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    register(
      _subdomain: string,
      _beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "register(string,address)"(
      _subdomain: string,
      _beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    registry(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "registry()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    removeController(
      controller: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "removeController(address)"(
      controller: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    subdomains(
      arg0: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "subdomains(bytes32)"(
      arg0: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    symbol(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "symbol()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    topdomain(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "topdomain()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    topdomainNameHash(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "topdomainNameHash()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transferDomainOwnership(
      _owner: string,
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferDomainOwnership(address,uint256)"(
      _owner: string,
      _tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    updateBase(
      _base: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "updateBase(address)"(
      _base: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    updateBaseURI(
      _baseURI: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "updateBaseURI(string)"(
      _baseURI: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    updateRegistry(
      _registry: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "updateRegistry(address)"(
      _registry: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
