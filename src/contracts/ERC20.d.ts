/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface ERC20Interface extends Interface {
  functions: {
    mintingFinished: TypedFunctionDescription<{ encode([]: []): string }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    approve: TypedFunctionDescription<{
      encode([_spender, _value]: [string, BigNumberish]): string;
    }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transferFrom: TypedFunctionDescription<{
      encode([_from, _to, _value]: [string, string, BigNumberish]): string;
    }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    unpause: TypedFunctionDescription<{ encode([]: []): string }>;

    mint: TypedFunctionDescription<{
      encode([_to, _amount]: [string, BigNumberish]): string;
    }>;

    burn: TypedFunctionDescription<{
      encode([_value]: [BigNumberish]): string;
    }>;

    paused: TypedFunctionDescription<{ encode([]: []): string }>;

    balanceOf: TypedFunctionDescription<{ encode([_owner]: [string]): string }>;

    finishMinting: TypedFunctionDescription<{ encode([]: []): string }>;

    pause: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    transfer: TypedFunctionDescription<{
      encode([_to, _value]: [string, BigNumberish]): string;
    }>;

    allowance: TypedFunctionDescription<{
      encode([_owner, _spender]: [string, string]): string;
    }>;

    setBalance: TypedFunctionDescription<{
      encode([to, amount]: [string, BigNumberish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;
  };

  events: {
    Mint: TypedEventDescription<{
      encodeTopics([to, amount]: [string | null, null]): string[];
    }>;

    MintFinished: TypedEventDescription<{ encodeTopics([]: []): string[] }>;

    Pause: TypedEventDescription<{ encodeTopics([]: []): string[] }>;

    Unpause: TypedEventDescription<{ encodeTopics([]: []): string[] }>;

    Burn: TypedEventDescription<{
      encodeTopics([burner, value]: [string | null, null]): string[];
    }>;

    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class ERC20 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ERC20;
  attach(addressOrName: string): ERC20;
  deployed(): Promise<ERC20>;

  on(event: EventFilter | string, listener: Listener): ERC20;
  once(event: EventFilter | string, listener: Listener): ERC20;
  addListener(eventName: EventFilter | string, listener: Listener): ERC20;
  removeAllListeners(eventName: EventFilter | string): ERC20;
  removeListener(eventName: any, listener: Listener): ERC20;

  interface: ERC20Interface;

  functions: {
    mintingFinished(overrides?: UnsignedTransaction): Promise<boolean>;

    "mintingFinished()"(overrides?: UnsignedTransaction): Promise<boolean>;

    name(overrides?: UnsignedTransaction): Promise<string>;

    "name()"(overrides?: UnsignedTransaction): Promise<string>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    decimals(overrides?: UnsignedTransaction): Promise<number>;

    "decimals()"(overrides?: UnsignedTransaction): Promise<number>;

    unpause(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "unpause()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    burn(
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    paused(overrides?: UnsignedTransaction): Promise<boolean>;

    "paused()"(overrides?: UnsignedTransaction): Promise<boolean>;

    balanceOf(
      _owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    finishMinting(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "finishMinting()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    pause(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "pause()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    symbol(overrides?: UnsignedTransaction): Promise<string>;

    "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setBalance(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setBalance(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  mintingFinished(overrides?: UnsignedTransaction): Promise<boolean>;

  "mintingFinished()"(overrides?: UnsignedTransaction): Promise<boolean>;

  name(overrides?: UnsignedTransaction): Promise<string>;

  "name()"(overrides?: UnsignedTransaction): Promise<string>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  decimals(overrides?: UnsignedTransaction): Promise<number>;

  "decimals()"(overrides?: UnsignedTransaction): Promise<number>;

  unpause(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "unpause()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  mint(
    _to: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  burn(
    _value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    _value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  paused(overrides?: UnsignedTransaction): Promise<boolean>;

  "paused()"(overrides?: UnsignedTransaction): Promise<boolean>;

  balanceOf(
    _owner: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    _owner: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  finishMinting(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "finishMinting()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  pause(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "pause()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  symbol(overrides?: UnsignedTransaction): Promise<string>;

  "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    _owner: string,
    _spender: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  setBalance(
    to: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setBalance(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {
    Mint(to: string | null, amount: null): EventFilter;

    MintFinished(): EventFilter;

    Pause(): EventFilter;

    Unpause(): EventFilter;

    Burn(burner: string | null, value: null): EventFilter;

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimate: {
    mintingFinished(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "mintingFinished()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    name(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "name()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    decimals(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "decimals()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    unpause(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "unpause()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    burn(
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "burn(uint256)"(
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    paused(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "paused()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    balanceOf(
      _owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    finishMinting(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "finishMinting()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    pause(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "pause()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    symbol(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "symbol()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setBalance(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setBalance(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
