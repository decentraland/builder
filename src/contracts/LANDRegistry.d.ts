/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface LANDRegistryInterface extends Interface {
  functions: {
    supportsInterface: TypedFunctionDescription<{
      encode([_interfaceID]: [Arrayish]): string;
    }>;

    proxyOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    updateManager: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    getApproved: TypedFunctionDescription<{
      encode([assetId]: [BigNumberish]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([operator, assetId]: [string, BigNumberish]): string;
    }>;

    ownerOfLand: TypedFunctionDescription<{
      encode([x, y]: [BigNumberish, BigNumberish]): string;
    }>;

    setLatestToNow: TypedFunctionDescription<{
      encode([user]: [string]): string;
    }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    assignNewParcel: TypedFunctionDescription<{
      encode([x, y, beneficiary]: [BigNumberish, BigNumberish, string]): string;
    }>;

    ownerOfLandMany: TypedFunctionDescription<{
      encode([x, y]: [BigNumberish[], BigNumberish[]]): string;
    }>;

    latestPing: TypedFunctionDescription<{ encode([]: [string]): string }>;

    updateManyLandData: TypedFunctionDescription<{
      encode([x, y, data]: [BigNumberish[], BigNumberish[], string]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, assetId]: [string, string, BigNumberish]): string;
    }>;

    isAuthorized: TypedFunctionDescription<{
      encode([operator, assetId]: [string, BigNumberish]): string;
    }>;

    authorizedDeploy: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;

    tokenOfOwnerByIndex: TypedFunctionDescription<{
      encode([owner, index]: [string, BigNumberish]): string;
    }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    authorizeDeploy: TypedFunctionDescription<{
      encode([beneficiary]: [string]): string;
    }>;

    transferLand: TypedFunctionDescription<{
      encode([x, y, to]: [BigNumberish, BigNumberish, string]): string;
    }>;

    safeTransferFrom: TypedFunctionDescription<{
      encode([from, to, assetId]: [string, string, BigNumberish]): string;
    }>;

    initialize: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    landData: TypedFunctionDescription<{
      encode([x, y]: [BigNumberish, BigNumberish]): string;
    }>;

    transferManyLand: TypedFunctionDescription<{
      encode([x, y, to]: [BigNumberish[], BigNumberish[], string]): string;
    }>;

    exists: TypedFunctionDescription<{
      encode([assetId]: [BigNumberish]): string;
    }>;

    tokensOf: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    ping: TypedFunctionDescription<{ encode([]: []): string }>;

    ownerOf: TypedFunctionDescription<{
      encode([assetId]: [BigNumberish]): string;
    }>;

    GET_METADATA: TypedFunctionDescription<{ encode([]: []): string }>;

    isUpdateAuthorized: TypedFunctionDescription<{
      encode([operator, assetId]: [string, BigNumberish]): string;
    }>;

    tokenMetadata: TypedFunctionDescription<{
      encode([assetId]: [BigNumberish]): string;
    }>;

    encodeTokenId: TypedFunctionDescription<{
      encode([x, y]: [BigNumberish, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    currentContract: TypedFunctionDescription<{ encode([]: []): string }>;

    setManyUpdateOperator: TypedFunctionDescription<{
      encode([_assetIds, _operator]: [BigNumberish[], string]): string;
    }>;

    description: TypedFunctionDescription<{ encode([]: []): string }>;

    decodeTokenId: TypedFunctionDescription<{
      encode([value]: [BigNumberish]): string;
    }>;

    assignMultipleParcels: TypedFunctionDescription<{
      encode([x, y, beneficiary]: [
        BigNumberish[],
        BigNumberish[],
        string
      ]): string;
    }>;

    createEstateWithMetadata: TypedFunctionDescription<{
      encode([x, y, beneficiary, metadata]: [
        BigNumberish[],
        BigNumberish[],
        string,
        string
      ]): string;
    }>;

    landOf: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    setEstateRegistry: TypedFunctionDescription<{
      encode([registry]: [string]): string;
    }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    updateOperator: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    setApprovalForAll: TypedFunctionDescription<{
      encode([operator, authorized]: [string, boolean]): string;
    }>;

    setUpdateOperator: TypedFunctionDescription<{
      encode([assetId, operator]: [BigNumberish, string]): string;
    }>;

    createEstate: TypedFunctionDescription<{
      encode([x, y, beneficiary]: [
        BigNumberish[],
        BigNumberish[],
        string
      ]): string;
    }>;

    updateLandData: TypedFunctionDescription<{
      encode([x, y, data]: [BigNumberish, BigNumberish, string]): string;
    }>;

    estateRegistry: TypedFunctionDescription<{ encode([]: []): string }>;

    isApprovedForAll: TypedFunctionDescription<{
      encode([assetHolder, operator]: [string, string]): string;
    }>;

    getApprovedAddress: TypedFunctionDescription<{
      encode([assetId]: [BigNumberish]): string;
    }>;

    setUpdateManager: TypedFunctionDescription<{
      encode([_owner, _operator, _approved]: [string, string, boolean]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;

    transferManyLandToEstate: TypedFunctionDescription<{
      encode([x, y, estateId]: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish
      ]): string;
    }>;

    transferLandToEstate: TypedFunctionDescription<{
      encode([x, y, estateId]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    forbidDeploy: TypedFunctionDescription<{
      encode([beneficiary]: [string]): string;
    }>;
  };

  events: {
    EstateRegistrySet: TypedEventDescription<{
      encodeTopics([registry]: [string | null]): string[];
    }>;

    Update: TypedEventDescription<{
      encodeTopics([assetId, holder, operator, data]: [
        BigNumberish | null,
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    UpdateOperator: TypedEventDescription<{
      encodeTopics([assetId, operator]: [
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    UpdateManager: TypedEventDescription<{
      encodeTopics([_owner, _operator, _caller, _approved]: [
        string | null,
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    DeployAuthorized: TypedEventDescription<{
      encodeTopics([_caller, _deployer]: [
        string | null,
        string | null
      ]): string[];
    }>;

    DeployForbidden: TypedEventDescription<{
      encodeTopics([_caller, _deployer]: [
        string | null,
        string | null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, assetId, operator, userData, operatorData]: [
        string | null,
        string | null,
        BigNumberish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    ApprovalForAll: TypedEventDescription<{
      encodeTopics([holder, operator, authorized]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Approval: TypedEventDescription<{
      encodeTopics([owner, operator, assetId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    OwnerUpdate: TypedEventDescription<{
      encodeTopics([_prevOwner, _newOwner]: [null, null]): string[];
    }>;
  };
}

export class LANDRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): LANDRegistry;
  attach(addressOrName: string): LANDRegistry;
  deployed(): Promise<LANDRegistry>;

  on(event: EventFilter | string, listener: Listener): LANDRegistry;
  once(event: EventFilter | string, listener: Listener): LANDRegistry;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): LANDRegistry;
  removeAllListeners(eventName: EventFilter | string): LANDRegistry;
  removeListener(eventName: any, listener: Listener): LANDRegistry;

  interface: LANDRegistryInterface;

  functions: {
    supportsInterface(
      _interfaceID: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      _interfaceID: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    proxyOwner(overrides?: UnsignedTransaction): Promise<string>;

    "proxyOwner()"(overrides?: UnsignedTransaction): Promise<string>;

    name(overrides?: UnsignedTransaction): Promise<string>;

    "name()"(overrides?: UnsignedTransaction): Promise<string>;

    updateManager(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "updateManager(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    getApproved(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getApproved(uint256)"(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    approve(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    ownerOfLand(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "ownerOfLand(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    setLatestToNow(
      user: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setLatestToNow(address)"(
      user: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    assignNewParcel(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "assignNewParcel(int256,int256,address)"(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    ownerOfLandMany(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<string[]>;

    "ownerOfLandMany(int256[],int256[])"(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<string[]>;

    latestPing(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "latestPing(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    updateManyLandData(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "updateManyLandData(int256[],int256[],string)"(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    isAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "isAuthorized(address,uint256)"(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    authorizedDeploy(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "authorizedDeploy(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    decimals(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "decimals()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    authorizeDeploy(
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "authorizeDeploy(address)"(
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferLand(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferLand(int256,int256,address)"(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      userData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    initialize(
      arg0: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "initialize(bytes)"(
      arg0: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    landData(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "landData(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    transferManyLand(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferManyLand(int256[],int256[],address)"(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    exists(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "exists(uint256)"(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "exists(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    tokensOf(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber[]>;

    "tokensOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber[]>;

    ping(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    "ping()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

    ownerOf(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "ownerOf(uint256)"(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    GET_METADATA(overrides?: UnsignedTransaction): Promise<string>;

    "GET_METADATA()"(overrides?: UnsignedTransaction): Promise<string>;

    isUpdateAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "isUpdateAuthorized(address,uint256)"(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    tokenMetadata(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "tokenMetadata(uint256)"(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    encodeTokenId(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "encodeTokenId(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    balanceOf(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    currentContract(overrides?: UnsignedTransaction): Promise<string>;

    "currentContract()"(overrides?: UnsignedTransaction): Promise<string>;

    setManyUpdateOperator(
      _assetIds: BigNumberish[],
      _operator: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setManyUpdateOperator(uint256[],address)"(
      _assetIds: BigNumberish[],
      _operator: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    description(overrides?: UnsignedTransaction): Promise<string>;

    "description()"(overrides?: UnsignedTransaction): Promise<string>;

    decodeTokenId(
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<[BigNumber, BigNumber]>;

    "decodeTokenId(uint256)"(
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<[BigNumber, BigNumber]>;

    assignMultipleParcels(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "assignMultipleParcels(int256[],int256[],address)"(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    createEstateWithMetadata(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createEstateWithMetadata(int256[],int256[],address,string)"(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    landOf(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<[BigNumber[], BigNumber[]]>;

    "landOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<[BigNumber[], BigNumber[]]>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    setEstateRegistry(
      registry: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setEstateRegistry(address)"(
      registry: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    symbol(overrides?: UnsignedTransaction): Promise<string>;

    "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

    updateOperator(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "updateOperator(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    setApprovalForAll(
      operator: string,
      authorized: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      authorized: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setUpdateOperator(
      assetId: BigNumberish,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setUpdateOperator(uint256,address)"(
      assetId: BigNumberish,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    createEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "createEstate(int256[],int256[],address)"(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    updateLandData(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "updateLandData(int256,int256,string)"(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    estateRegistry(overrides?: UnsignedTransaction): Promise<string>;

    "estateRegistry()"(overrides?: UnsignedTransaction): Promise<string>;

    isApprovedForAll(
      assetHolder: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      assetHolder: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    getApprovedAddress(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getApprovedAddress(uint256)"(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    setUpdateManager(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setUpdateManager(address,address,bool)"(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferManyLandToEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      estateId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferManyLandToEstate(int256[],int256[],uint256)"(
      x: BigNumberish[],
      y: BigNumberish[],
      estateId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferLandToEstate(
      x: BigNumberish,
      y: BigNumberish,
      estateId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferLandToEstate(int256,int256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      estateId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    forbidDeploy(
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "forbidDeploy(address)"(
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  supportsInterface(
    _interfaceID: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    _interfaceID: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  proxyOwner(overrides?: UnsignedTransaction): Promise<string>;

  "proxyOwner()"(overrides?: UnsignedTransaction): Promise<string>;

  name(overrides?: UnsignedTransaction): Promise<string>;

  "name()"(overrides?: UnsignedTransaction): Promise<string>;

  updateManager(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "updateManager(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  getApproved(
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getApproved(uint256)"(
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  approve(
    operator: string,
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    operator: string,
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  ownerOfLand(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "ownerOfLand(int256,int256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  setLatestToNow(
    user: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setLatestToNow(address)"(
    user: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  assignNewParcel(
    x: BigNumberish,
    y: BigNumberish,
    beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "assignNewParcel(int256,int256,address)"(
    x: BigNumberish,
    y: BigNumberish,
    beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  ownerOfLandMany(
    x: BigNumberish[],
    y: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<string[]>;

  "ownerOfLandMany(int256[],int256[])"(
    x: BigNumberish[],
    y: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<string[]>;

  latestPing(arg0: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

  "latestPing(address)"(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  updateManyLandData(
    x: BigNumberish[],
    y: BigNumberish[],
    data: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "updateManyLandData(int256[],int256[],string)"(
    x: BigNumberish[],
    y: BigNumberish[],
    data: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  isAuthorized(
    operator: string,
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "isAuthorized(address,uint256)"(
    operator: string,
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  authorizedDeploy(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "authorizedDeploy(address)"(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  decimals(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "decimals()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  authorizeDeploy(
    beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "authorizeDeploy(address)"(
    beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferLand(
    x: BigNumberish,
    y: BigNumberish,
    to: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferLand(int256,int256,address)"(
    x: BigNumberish,
    y: BigNumberish,
    to: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    assetId: BigNumberish,
    userData: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  initialize(
    arg0: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "initialize(bytes)"(
    arg0: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  landData(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "landData(int256,int256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  transferManyLand(
    x: BigNumberish[],
    y: BigNumberish[],
    to: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferManyLand(int256[],int256[],address)"(
    x: BigNumberish[],
    y: BigNumberish[],
    to: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  exists(
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "exists(uint256)"(
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "exists(int256,int256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  tokensOf(
    owner: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber[]>;

  "tokensOf(address)"(
    owner: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber[]>;

  ping(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  "ping()"(overrides?: UnsignedTransaction): Promise<ContractTransaction>;

  ownerOf(
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "ownerOf(uint256)"(
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  GET_METADATA(overrides?: UnsignedTransaction): Promise<string>;

  "GET_METADATA()"(overrides?: UnsignedTransaction): Promise<string>;

  isUpdateAuthorized(
    operator: string,
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "isUpdateAuthorized(address,uint256)"(
    operator: string,
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  tokenMetadata(
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "tokenMetadata(uint256)"(
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  encodeTokenId(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "encodeTokenId(int256,int256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  currentContract(overrides?: UnsignedTransaction): Promise<string>;

  "currentContract()"(overrides?: UnsignedTransaction): Promise<string>;

  setManyUpdateOperator(
    _assetIds: BigNumberish[],
    _operator: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setManyUpdateOperator(uint256[],address)"(
    _assetIds: BigNumberish[],
    _operator: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  description(overrides?: UnsignedTransaction): Promise<string>;

  "description()"(overrides?: UnsignedTransaction): Promise<string>;

  decodeTokenId(
    value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<[BigNumber, BigNumber]>;

  "decodeTokenId(uint256)"(
    value: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<[BigNumber, BigNumber]>;

  assignMultipleParcels(
    x: BigNumberish[],
    y: BigNumberish[],
    beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "assignMultipleParcels(int256[],int256[],address)"(
    x: BigNumberish[],
    y: BigNumberish[],
    beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  createEstateWithMetadata(
    x: BigNumberish[],
    y: BigNumberish[],
    beneficiary: string,
    metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createEstateWithMetadata(int256[],int256[],address,string)"(
    x: BigNumberish[],
    y: BigNumberish[],
    beneficiary: string,
    metadata: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  landOf(
    owner: string,
    overrides?: UnsignedTransaction
  ): Promise<[BigNumber[], BigNumber[]]>;

  "landOf(address)"(
    owner: string,
    overrides?: UnsignedTransaction
  ): Promise<[BigNumber[], BigNumber[]]>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  setEstateRegistry(
    registry: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setEstateRegistry(address)"(
    registry: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  symbol(overrides?: UnsignedTransaction): Promise<string>;

  "symbol()"(overrides?: UnsignedTransaction): Promise<string>;

  updateOperator(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "updateOperator(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  setApprovalForAll(
    operator: string,
    authorized: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    authorized: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setUpdateOperator(
    assetId: BigNumberish,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setUpdateOperator(uint256,address)"(
    assetId: BigNumberish,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  createEstate(
    x: BigNumberish[],
    y: BigNumberish[],
    beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "createEstate(int256[],int256[],address)"(
    x: BigNumberish[],
    y: BigNumberish[],
    beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  updateLandData(
    x: BigNumberish,
    y: BigNumberish,
    data: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "updateLandData(int256,int256,string)"(
    x: BigNumberish,
    y: BigNumberish,
    data: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  estateRegistry(overrides?: UnsignedTransaction): Promise<string>;

  "estateRegistry()"(overrides?: UnsignedTransaction): Promise<string>;

  isApprovedForAll(
    assetHolder: string,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    assetHolder: string,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  getApprovedAddress(
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getApprovedAddress(uint256)"(
    assetId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  setUpdateManager(
    _owner: string,
    _operator: string,
    _approved: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setUpdateManager(address,address,bool)"(
    _owner: string,
    _operator: string,
    _approved: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferManyLandToEstate(
    x: BigNumberish[],
    y: BigNumberish[],
    estateId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferManyLandToEstate(int256[],int256[],uint256)"(
    x: BigNumberish[],
    y: BigNumberish[],
    estateId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferLandToEstate(
    x: BigNumberish,
    y: BigNumberish,
    estateId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferLandToEstate(int256,int256,uint256)"(
    x: BigNumberish,
    y: BigNumberish,
    estateId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  forbidDeploy(
    beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "forbidDeploy(address)"(
    beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {
    EstateRegistrySet(registry: string | null): EventFilter;

    Update(
      assetId: BigNumberish | null,
      holder: string | null,
      operator: string | null,
      data: null
    ): EventFilter;

    UpdateOperator(
      assetId: BigNumberish | null,
      operator: string | null
    ): EventFilter;

    UpdateManager(
      _owner: string | null,
      _operator: string | null,
      _caller: string | null,
      _approved: null
    ): EventFilter;

    DeployAuthorized(
      _caller: string | null,
      _deployer: string | null
    ): EventFilter;

    DeployForbidden(
      _caller: string | null,
      _deployer: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      assetId: BigNumberish | null,
      operator: null,
      userData: null,
      operatorData: null
    ): EventFilter;

    ApprovalForAll(
      holder: string | null,
      operator: string | null,
      authorized: null
    ): EventFilter;

    Approval(
      owner: string | null,
      operator: string | null,
      assetId: BigNumberish | null
    ): EventFilter;

    OwnerUpdate(_prevOwner: null, _newOwner: null): EventFilter;
  };

  estimate: {
    supportsInterface(
      _interfaceID: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      _interfaceID: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    proxyOwner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "proxyOwner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    name(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "name()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    updateManager(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "updateManager(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getApproved(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    approve(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    ownerOfLand(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "ownerOfLand(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setLatestToNow(
      user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setLatestToNow(address)"(
      user: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    assignNewParcel(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "assignNewParcel(int256,int256,address)"(
      x: BigNumberish,
      y: BigNumberish,
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    ownerOfLandMany(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "ownerOfLandMany(int256[],int256[])"(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    latestPing(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "latestPing(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    updateManyLandData(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "updateManyLandData(int256[],int256[],string)"(
      x: BigNumberish[],
      y: BigNumberish[],
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    isAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "isAuthorized(address,uint256)"(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    authorizedDeploy(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "authorizedDeploy(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    decimals(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "decimals()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    authorizeDeploy(
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "authorizeDeploy(address)"(
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferLand(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferLand(int256,int256,address)"(
      x: BigNumberish,
      y: BigNumberish,
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      userData: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    initialize(
      arg0: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "initialize(bytes)"(
      arg0: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    landData(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "landData(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferManyLand(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferManyLand(int256[],int256[],address)"(
      x: BigNumberish[],
      y: BigNumberish[],
      to: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    exists(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "exists(uint256)"(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "exists(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokensOf(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokensOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    ping(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "ping()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    ownerOf(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    GET_METADATA(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "GET_METADATA()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    isUpdateAuthorized(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "isUpdateAuthorized(address,uint256)"(
      operator: string,
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenMetadata(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenMetadata(uint256)"(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    encodeTokenId(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "encodeTokenId(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    balanceOf(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    currentContract(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "currentContract()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    setManyUpdateOperator(
      _assetIds: BigNumberish[],
      _operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setManyUpdateOperator(uint256[],address)"(
      _assetIds: BigNumberish[],
      _operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    description(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "description()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    decodeTokenId(
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "decodeTokenId(uint256)"(
      value: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    assignMultipleParcels(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "assignMultipleParcels(int256[],int256[],address)"(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    createEstateWithMetadata(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "createEstateWithMetadata(int256[],int256[],address,string)"(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      metadata: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    landOf(owner: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "landOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    setEstateRegistry(
      registry: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setEstateRegistry(address)"(
      registry: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    symbol(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "symbol()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    updateOperator(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "updateOperator(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      authorized: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      authorized: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setUpdateOperator(
      assetId: BigNumberish,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setUpdateOperator(uint256,address)"(
      assetId: BigNumberish,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    createEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "createEstate(int256[],int256[],address)"(
      x: BigNumberish[],
      y: BigNumberish[],
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    updateLandData(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "updateLandData(int256,int256,string)"(
      x: BigNumberish,
      y: BigNumberish,
      data: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    estateRegistry(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "estateRegistry()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    isApprovedForAll(
      assetHolder: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      assetHolder: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getApprovedAddress(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getApprovedAddress(uint256)"(
      assetId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setUpdateManager(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setUpdateManager(address,address,bool)"(
      _owner: string,
      _operator: string,
      _approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferManyLandToEstate(
      x: BigNumberish[],
      y: BigNumberish[],
      estateId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferManyLandToEstate(int256[],int256[],uint256)"(
      x: BigNumberish[],
      y: BigNumberish[],
      estateId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferLandToEstate(
      x: BigNumberish,
      y: BigNumberish,
      estateId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferLandToEstate(int256,int256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      estateId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    forbidDeploy(
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "forbidDeploy(address)"(
      beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
