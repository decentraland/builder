/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Rentals {
  export type ListingStruct = {
    signer: PromiseOrValue<string>;
    contractAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    indexes: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    pricePerDay: PromiseOrValue<BigNumberish>[];
    maxDays: PromiseOrValue<BigNumberish>[];
    minDays: PromiseOrValue<BigNumberish>[];
    target: PromiseOrValue<string>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type ListingStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string,
    string
  ] & {
    signer: string;
    contractAddress: string;
    tokenId: BigNumber;
    expiration: BigNumber;
    indexes: [BigNumber, BigNumber, BigNumber];
    pricePerDay: BigNumber[];
    maxDays: BigNumber[];
    minDays: BigNumber[];
    target: string;
    signature: string;
  };

  export type OfferStruct = {
    signer: PromiseOrValue<string>;
    contractAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    indexes: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    pricePerDay: PromiseOrValue<BigNumberish>;
    rentalDays: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<string>;
    fingerprint: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type OfferStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    signer: string;
    contractAddress: string;
    tokenId: BigNumber;
    expiration: BigNumber;
    indexes: [BigNumber, BigNumber, BigNumber];
    pricePerDay: BigNumber;
    rentalDays: BigNumber;
    operator: string;
    fingerprint: string;
    signature: string;
  };

  export type RentalStruct = {
    lessor: PromiseOrValue<string>;
    tenant: PromiseOrValue<string>;
    endDate: PromiseOrValue<BigNumberish>;
  };

  export type RentalStructOutput = [string, string, BigNumber] & {
    lessor: string;
    tenant: string;
    endDate: BigNumber;
  };
}

export interface RentalsInterface extends utils.Interface {
  functions: {
    "acceptListing((address,address,uint256,uint256,uint256[3],uint256[],uint256[],uint256[],address,bytes),address,uint256,uint256,bytes32)": FunctionFragment;
    "acceptOffer((address,address,uint256,uint256,uint256[3],uint256,uint256,address,bytes32,bytes))": FunctionFragment;
    "bumpAssetIndex(address,uint256)": FunctionFragment;
    "bumpContractIndex()": FunctionFragment;
    "bumpSignerIndex()": FunctionFragment;
    "claim(address[],uint256[])": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes)": FunctionFragment;
    "getAssetIndex(address,uint256,address)": FunctionFragment;
    "getContractIndex()": FunctionFragment;
    "getFee()": FunctionFragment;
    "getFeeCollector()": FunctionFragment;
    "getIsRented(address,uint256)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getRental(address,uint256)": FunctionFragment;
    "getSignerIndex(address)": FunctionFragment;
    "getToken()": FunctionFragment;
    "initialize(address,address,address,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setManyLandUpdateOperator(address,uint256,uint256[][],address[])": FunctionFragment;
    "setUpdateOperator(address[],uint256[],address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptListing"
      | "acceptOffer"
      | "bumpAssetIndex"
      | "bumpContractIndex"
      | "bumpSignerIndex"
      | "claim"
      | "executeMetaTransaction"
      | "getAssetIndex"
      | "getContractIndex"
      | "getFee"
      | "getFeeCollector"
      | "getIsRented"
      | "getNonce"
      | "getRental"
      | "getSignerIndex"
      | "getToken"
      | "initialize"
      | "onERC721Received"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setFee"
      | "setFeeCollector"
      | "setManyLandUpdateOperator"
      | "setUpdateOperator"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptListing",
    values: [
      Rentals.ListingStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [Rentals.OfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bumpAssetIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bumpContractIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bumpSignerIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetIndex",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsRented",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRental",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignerIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setManyLandUpdateOperator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[][],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateOperator",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bumpAssetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bumpContractIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bumpSignerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsRented",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRental", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSignerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManyLandUpdateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AssetClaimed(address,uint256,address)": EventFragment;
    "AssetIndexUpdated(address,address,uint256,uint256,address)": EventFragment;
    "AssetRented(address,uint256,address,address,address,uint256,uint256,bool,address,bytes)": EventFragment;
    "ContractIndexUpdated(uint256,address)": EventFragment;
    "FeeCollectorUpdated(address,address,address)": EventFragment;
    "FeeUpdated(uint256,uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SignerIndexUpdated(address,uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AssetClaimedEventObject {
  _contractAddress: string;
  _tokenId: BigNumber;
  _sender: string;
}
export type AssetClaimedEvent = TypedEvent<
  [string, BigNumber, string],
  AssetClaimedEventObject
>;

export type AssetClaimedEventFilter = TypedEventFilter<AssetClaimedEvent>;

export interface AssetIndexUpdatedEventObject {
  _signer: string;
  _contractAddress: string;
  _tokenId: BigNumber;
  _newIndex: BigNumber;
  _sender: string;
}
export type AssetIndexUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  AssetIndexUpdatedEventObject
>;

export type AssetIndexUpdatedEventFilter =
  TypedEventFilter<AssetIndexUpdatedEvent>;

export interface AssetRentedEventObject {
  _contractAddress: string;
  _tokenId: BigNumber;
  _lessor: string;
  _tenant: string;
  _operator: string;
  _rentalDays: BigNumber;
  _pricePerDay: BigNumber;
  _isExtension: boolean;
  _sender: string;
  _signature: string;
}
export type AssetRentedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    string
  ],
  AssetRentedEventObject
>;

export type AssetRentedEventFilter = TypedEventFilter<AssetRentedEvent>;

export interface ContractIndexUpdatedEventObject {
  _newIndex: BigNumber;
  _sender: string;
}
export type ContractIndexUpdatedEvent = TypedEvent<
  [BigNumber, string],
  ContractIndexUpdatedEventObject
>;

export type ContractIndexUpdatedEventFilter =
  TypedEventFilter<ContractIndexUpdatedEvent>;

export interface FeeCollectorUpdatedEventObject {
  _from: string;
  _to: string;
  _sender: string;
}
export type FeeCollectorUpdatedEvent = TypedEvent<
  [string, string, string],
  FeeCollectorUpdatedEventObject
>;

export type FeeCollectorUpdatedEventFilter =
  TypedEventFilter<FeeCollectorUpdatedEvent>;

export interface FeeUpdatedEventObject {
  _from: BigNumber;
  _to: BigNumber;
  _sender: string;
}
export type FeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  FeeUpdatedEventObject
>;

export type FeeUpdatedEventFilter = TypedEventFilter<FeeUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MetaTransactionExecutedEventObject {
  _userAddress: string;
  _relayerAddress: string;
  _functionData: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SignerIndexUpdatedEventObject {
  _signer: string;
  _newIndex: BigNumber;
  _sender: string;
}
export type SignerIndexUpdatedEvent = TypedEvent<
  [string, BigNumber, string],
  SignerIndexUpdatedEventObject
>;

export type SignerIndexUpdatedEventFilter =
  TypedEventFilter<SignerIndexUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Rentals extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RentalsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptListing(
      _listing: Rentals.ListingStruct,
      _operator: PromiseOrValue<string>,
      _conditionIndex: PromiseOrValue<BigNumberish>,
      _rentalDays: PromiseOrValue<BigNumberish>,
      _fingerprint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptOffer(
      _offer: Rentals.OfferStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bumpAssetIndex(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bumpContractIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bumpSignerIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      _contractAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeMetaTransaction(
      _userAddress: PromiseOrValue<string>,
      _functionData: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAssetIndex(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getContractIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    getIsRented(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNonce(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRental(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Rentals.RentalStructOutput]>;

    getSignerIndex(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManyLandUpdateOperator(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _landTokenIds: PromiseOrValue<BigNumberish>[][],
      _operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpdateOperator(
      _contractAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptListing(
    _listing: Rentals.ListingStruct,
    _operator: PromiseOrValue<string>,
    _conditionIndex: PromiseOrValue<BigNumberish>,
    _rentalDays: PromiseOrValue<BigNumberish>,
    _fingerprint: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOffer(
    _offer: Rentals.OfferStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bumpAssetIndex(
    _contractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bumpContractIndex(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bumpSignerIndex(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    _contractAddresses: PromiseOrValue<string>[],
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeMetaTransaction(
    _userAddress: PromiseOrValue<string>,
    _functionData: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAssetIndex(
    _contractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _signer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getContractIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getFee(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeCollector(overrides?: CallOverrides): Promise<string>;

  getIsRented(
    _contractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNonce(
    _signer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRental(
    _contractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Rentals.RentalStructOutput>;

  getSignerIndex(
    _signer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getToken(overrides?: CallOverrides): Promise<string>;

  initialize(
    _owner: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _feeCollector: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    _operator: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManyLandUpdateOperator(
    _contractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _landTokenIds: PromiseOrValue<BigNumberish>[][],
    _operators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpdateOperator(
    _contractAddresses: PromiseOrValue<string>[],
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _operators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptListing(
      _listing: Rentals.ListingStruct,
      _operator: PromiseOrValue<string>,
      _conditionIndex: PromiseOrValue<BigNumberish>,
      _rentalDays: PromiseOrValue<BigNumberish>,
      _fingerprint: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOffer(
      _offer: Rentals.OfferStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    bumpAssetIndex(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bumpContractIndex(overrides?: CallOverrides): Promise<void>;

    bumpSignerIndex(overrides?: CallOverrides): Promise<void>;

    claim(
      _contractAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeMetaTransaction(
      _userAddress: PromiseOrValue<string>,
      _functionData: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetIndex(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeCollector(overrides?: CallOverrides): Promise<string>;

    getIsRented(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNonce(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRental(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Rentals.RentalStructOutput>;

    getSignerIndex(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<string>;

    initialize(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManyLandUpdateOperator(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _landTokenIds: PromiseOrValue<BigNumberish>[][],
      _operators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdateOperator(
      _contractAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _operators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AssetClaimed(address,uint256,address)"(
      _contractAddress?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _sender?: null
    ): AssetClaimedEventFilter;
    AssetClaimed(
      _contractAddress?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _sender?: null
    ): AssetClaimedEventFilter;

    "AssetIndexUpdated(address,address,uint256,uint256,address)"(
      _signer?: PromiseOrValue<string> | null,
      _contractAddress?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _newIndex?: null,
      _sender?: null
    ): AssetIndexUpdatedEventFilter;
    AssetIndexUpdated(
      _signer?: PromiseOrValue<string> | null,
      _contractAddress?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _newIndex?: null,
      _sender?: null
    ): AssetIndexUpdatedEventFilter;

    "AssetRented(address,uint256,address,address,address,uint256,uint256,bool,address,bytes)"(
      _contractAddress?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _lessor?: null,
      _tenant?: null,
      _operator?: null,
      _rentalDays?: null,
      _pricePerDay?: null,
      _isExtension?: null,
      _sender?: null,
      _signature?: null
    ): AssetRentedEventFilter;
    AssetRented(
      _contractAddress?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _lessor?: null,
      _tenant?: null,
      _operator?: null,
      _rentalDays?: null,
      _pricePerDay?: null,
      _isExtension?: null,
      _sender?: null,
      _signature?: null
    ): AssetRentedEventFilter;

    "ContractIndexUpdated(uint256,address)"(
      _newIndex?: null,
      _sender?: null
    ): ContractIndexUpdatedEventFilter;
    ContractIndexUpdated(
      _newIndex?: null,
      _sender?: null
    ): ContractIndexUpdatedEventFilter;

    "FeeCollectorUpdated(address,address,address)"(
      _from?: null,
      _to?: null,
      _sender?: null
    ): FeeCollectorUpdatedEventFilter;
    FeeCollectorUpdated(
      _from?: null,
      _to?: null,
      _sender?: null
    ): FeeCollectorUpdatedEventFilter;

    "FeeUpdated(uint256,uint256,address)"(
      _from?: null,
      _to?: null,
      _sender?: null
    ): FeeUpdatedEventFilter;
    FeeUpdated(_from?: null, _to?: null, _sender?: null): FeeUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      _userAddress?: PromiseOrValue<string> | null,
      _relayerAddress?: PromiseOrValue<string> | null,
      _functionData?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      _userAddress?: PromiseOrValue<string> | null,
      _relayerAddress?: PromiseOrValue<string> | null,
      _functionData?: null
    ): MetaTransactionExecutedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SignerIndexUpdated(address,uint256,address)"(
      _signer?: PromiseOrValue<string> | null,
      _newIndex?: null,
      _sender?: null
    ): SignerIndexUpdatedEventFilter;
    SignerIndexUpdated(
      _signer?: PromiseOrValue<string> | null,
      _newIndex?: null,
      _sender?: null
    ): SignerIndexUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    acceptListing(
      _listing: Rentals.ListingStruct,
      _operator: PromiseOrValue<string>,
      _conditionIndex: PromiseOrValue<BigNumberish>,
      _rentalDays: PromiseOrValue<BigNumberish>,
      _fingerprint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptOffer(
      _offer: Rentals.OfferStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bumpAssetIndex(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bumpContractIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bumpSignerIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      _contractAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeMetaTransaction(
      _userAddress: PromiseOrValue<string>,
      _functionData: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAssetIndex(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getIsRented(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRental(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSignerIndex(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManyLandUpdateOperator(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _landTokenIds: PromiseOrValue<BigNumberish>[][],
      _operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpdateOperator(
      _contractAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptListing(
      _listing: Rentals.ListingStruct,
      _operator: PromiseOrValue<string>,
      _conditionIndex: PromiseOrValue<BigNumberish>,
      _rentalDays: PromiseOrValue<BigNumberish>,
      _fingerprint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptOffer(
      _offer: Rentals.OfferStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bumpAssetIndex(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bumpContractIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bumpSignerIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _contractAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      _userAddress: PromiseOrValue<string>,
      _functionData: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAssetIndex(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIsRented(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRental(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSignerIndex(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManyLandUpdateOperator(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _landTokenIds: PromiseOrValue<BigNumberish>[][],
      _operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpdateOperator(
      _contractAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
