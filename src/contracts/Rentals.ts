/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Rentals {
  export type ListingStruct = {
    signer: PromiseOrValue<string>;
    contractAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    nonces: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    pricePerDay: PromiseOrValue<BigNumberish>[];
    maxDays: PromiseOrValue<BigNumberish>[];
    minDays: PromiseOrValue<BigNumberish>[];
    target: PromiseOrValue<string>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type ListingStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string,
    string
  ] & {
    signer: string;
    contractAddress: string;
    tokenId: BigNumber;
    expiration: BigNumber;
    nonces: [BigNumber, BigNumber, BigNumber];
    pricePerDay: BigNumber[];
    maxDays: BigNumber[];
    minDays: BigNumber[];
    target: string;
    signature: string;
  };

  export type OfferStruct = {
    signer: PromiseOrValue<string>;
    contractAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    nonces: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    pricePerDay: PromiseOrValue<BigNumberish>;
    rentalDays: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<string>;
    fingerprint: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type OfferStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    signer: string;
    contractAddress: string;
    tokenId: BigNumber;
    expiration: BigNumber;
    nonces: [BigNumber, BigNumber, BigNumber];
    pricePerDay: BigNumber;
    rentalDays: BigNumber;
    operator: string;
    fingerprint: string;
    signature: string;
  };
}

export interface RentalsInterface extends utils.Interface {
  functions: {
    "acceptListing((address,address,uint256,uint256,uint256[3],uint256[],uint256[],uint256[],address,bytes),address,uint256,uint256,bytes32)": FunctionFragment;
    "acceptOffer((address,address,uint256,uint256,uint256[3],uint256,uint256,address,bytes32,bytes))": FunctionFragment;
    "assetNonce(address,uint256,address)": FunctionFragment;
    "bumpAssetNonce(address,uint256)": FunctionFragment;
    "bumpContractNonce()": FunctionFragment;
    "bumpSignerNonce()": FunctionFragment;
    "claim(address,uint256)": FunctionFragment;
    "contractNonce()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes)": FunctionFragment;
    "fee()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "initialize(address,address,address,uint256)": FunctionFragment;
    "isRented(address,uint256)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rentals(address,uint256)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setOperator(address,uint256,address)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "signerNonce(address)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptListing"
      | "acceptOffer"
      | "assetNonce"
      | "bumpAssetNonce"
      | "bumpContractNonce"
      | "bumpSignerNonce"
      | "claim"
      | "contractNonce"
      | "executeMetaTransaction"
      | "fee"
      | "feeCollector"
      | "initialize"
      | "isRented"
      | "nonces"
      | "onERC721Received"
      | "owner"
      | "renounceOwnership"
      | "rentals"
      | "setFee"
      | "setFeeCollector"
      | "setOperator"
      | "setToken"
      | "signerNonce"
      | "token"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptListing",
    values: [
      Rentals.ListingStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [Rentals.OfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "assetNonce",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bumpAssetNonce",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bumpContractNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bumpSignerNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRented",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rentals",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signerNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bumpAssetNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bumpContractNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bumpSignerNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRented", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signerNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AssetClaimed(address,uint256,address)": EventFragment;
    "AssetNonceUpdated(uint256,uint256,address,uint256,address,address)": EventFragment;
    "AssetRented(address,uint256,address,address,address,uint256,uint256,bool,address,bytes)": EventFragment;
    "ContractNonceUpdated(uint256,uint256,address)": EventFragment;
    "FeeCollectorUpdated(address,address,address)": EventFragment;
    "FeeUpdated(uint256,uint256,address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OperatorUpdated(address,uint256,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SignerNonceUpdated(uint256,uint256,address,address)": EventFragment;
    "TokenUpdated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetNonceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractNonceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerNonceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUpdated"): EventFragment;
}

export interface AssetClaimedEventObject {
  _contractAddress: string;
  _tokenId: BigNumber;
  _sender: string;
}
export type AssetClaimedEvent = TypedEvent<
  [string, BigNumber, string],
  AssetClaimedEventObject
>;

export type AssetClaimedEventFilter = TypedEventFilter<AssetClaimedEvent>;

export interface AssetNonceUpdatedEventObject {
  _from: BigNumber;
  _to: BigNumber;
  _contractAddress: string;
  _tokenId: BigNumber;
  _signer: string;
  _sender: string;
}
export type AssetNonceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string, string],
  AssetNonceUpdatedEventObject
>;

export type AssetNonceUpdatedEventFilter =
  TypedEventFilter<AssetNonceUpdatedEvent>;

export interface AssetRentedEventObject {
  _contractAddress: string;
  _tokenId: BigNumber;
  _lessor: string;
  _tenant: string;
  _operator: string;
  _rentalDays: BigNumber;
  _pricePerDay: BigNumber;
  _isExtension: boolean;
  _sender: string;
  _signature: string;
}
export type AssetRentedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    string
  ],
  AssetRentedEventObject
>;

export type AssetRentedEventFilter = TypedEventFilter<AssetRentedEvent>;

export interface ContractNonceUpdatedEventObject {
  _from: BigNumber;
  _to: BigNumber;
  _sender: string;
}
export type ContractNonceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ContractNonceUpdatedEventObject
>;

export type ContractNonceUpdatedEventFilter =
  TypedEventFilter<ContractNonceUpdatedEvent>;

export interface FeeCollectorUpdatedEventObject {
  _from: string;
  _to: string;
  _sender: string;
}
export type FeeCollectorUpdatedEvent = TypedEvent<
  [string, string, string],
  FeeCollectorUpdatedEventObject
>;

export type FeeCollectorUpdatedEventFilter =
  TypedEventFilter<FeeCollectorUpdatedEvent>;

export interface FeeUpdatedEventObject {
  _from: BigNumber;
  _to: BigNumber;
  _sender: string;
}
export type FeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  FeeUpdatedEventObject
>;

export type FeeUpdatedEventFilter = TypedEventFilter<FeeUpdatedEvent>;

export interface MetaTransactionExecutedEventObject {
  _userAddress: string;
  _relayerAddress: string;
  _functionData: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface OperatorUpdatedEventObject {
  _contractAddress: string;
  _tokenId: BigNumber;
  _to: string;
  _sender: string;
}
export type OperatorUpdatedEvent = TypedEvent<
  [string, BigNumber, string, string],
  OperatorUpdatedEventObject
>;

export type OperatorUpdatedEventFilter = TypedEventFilter<OperatorUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SignerNonceUpdatedEventObject {
  _from: BigNumber;
  _to: BigNumber;
  _signer: string;
  _sender: string;
}
export type SignerNonceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  SignerNonceUpdatedEventObject
>;

export type SignerNonceUpdatedEventFilter =
  TypedEventFilter<SignerNonceUpdatedEvent>;

export interface TokenUpdatedEventObject {
  _from: string;
  _to: string;
  _sender: string;
}
export type TokenUpdatedEvent = TypedEvent<
  [string, string, string],
  TokenUpdatedEventObject
>;

export type TokenUpdatedEventFilter = TypedEventFilter<TokenUpdatedEvent>;

export interface Rentals extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RentalsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptListing(
      _listing: Rentals.ListingStruct,
      _operator: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _rentalDays: PromiseOrValue<BigNumberish>,
      _fingerprint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptOffer(
      _offer: Rentals.OfferStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetNonce(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bumpAssetNonce(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bumpContractNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bumpSignerNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeMetaTransaction(
      _userAddress: PromiseOrValue<string>,
      _functionData: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isRented(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC721Received(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rentals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        lessor: string;
        tenant: string;
        endDate: BigNumber;
      }
    >;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signerNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptListing(
    _listing: Rentals.ListingStruct,
    _operator: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    _rentalDays: PromiseOrValue<BigNumberish>,
    _fingerprint: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOffer(
    _offer: Rentals.OfferStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetNonce(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bumpAssetNonce(
    _contractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bumpContractNonce(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bumpSignerNonce(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    _contractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractNonce(overrides?: CallOverrides): Promise<BigNumber>;

  executeMetaTransaction(
    _userAddress: PromiseOrValue<string>,
    _functionData: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  initialize(
    _owner: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _feeCollector: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isRented(
    _contractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC721Received(
    _operator: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rentals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      lessor: string;
      tenant: string;
      endDate: BigNumber;
    }
  >;

  setFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _contractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signerNonce(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptListing(
      _listing: Rentals.ListingStruct,
      _operator: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _rentalDays: PromiseOrValue<BigNumberish>,
      _fingerprint: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOffer(
      _offer: Rentals.OfferStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    assetNonce(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bumpAssetNonce(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bumpContractNonce(overrides?: CallOverrides): Promise<void>;

    bumpSignerNonce(overrides?: CallOverrides): Promise<void>;

    claim(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    contractNonce(overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      _userAddress: PromiseOrValue<string>,
      _functionData: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    initialize(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isRented(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rentals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        lessor: string;
        tenant: string;
        endDate: BigNumber;
      }
    >;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signerNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetClaimed(address,uint256,address)"(
      _contractAddress?: null,
      _tokenId?: null,
      _sender?: null
    ): AssetClaimedEventFilter;
    AssetClaimed(
      _contractAddress?: null,
      _tokenId?: null,
      _sender?: null
    ): AssetClaimedEventFilter;

    "AssetNonceUpdated(uint256,uint256,address,uint256,address,address)"(
      _from?: null,
      _to?: null,
      _contractAddress?: null,
      _tokenId?: null,
      _signer?: null,
      _sender?: null
    ): AssetNonceUpdatedEventFilter;
    AssetNonceUpdated(
      _from?: null,
      _to?: null,
      _contractAddress?: null,
      _tokenId?: null,
      _signer?: null,
      _sender?: null
    ): AssetNonceUpdatedEventFilter;

    "AssetRented(address,uint256,address,address,address,uint256,uint256,bool,address,bytes)"(
      _contractAddress?: null,
      _tokenId?: null,
      _lessor?: null,
      _tenant?: null,
      _operator?: null,
      _rentalDays?: null,
      _pricePerDay?: null,
      _isExtension?: null,
      _sender?: null,
      _signature?: null
    ): AssetRentedEventFilter;
    AssetRented(
      _contractAddress?: null,
      _tokenId?: null,
      _lessor?: null,
      _tenant?: null,
      _operator?: null,
      _rentalDays?: null,
      _pricePerDay?: null,
      _isExtension?: null,
      _sender?: null,
      _signature?: null
    ): AssetRentedEventFilter;

    "ContractNonceUpdated(uint256,uint256,address)"(
      _from?: null,
      _to?: null,
      _sender?: null
    ): ContractNonceUpdatedEventFilter;
    ContractNonceUpdated(
      _from?: null,
      _to?: null,
      _sender?: null
    ): ContractNonceUpdatedEventFilter;

    "FeeCollectorUpdated(address,address,address)"(
      _from?: null,
      _to?: null,
      _sender?: null
    ): FeeCollectorUpdatedEventFilter;
    FeeCollectorUpdated(
      _from?: null,
      _to?: null,
      _sender?: null
    ): FeeCollectorUpdatedEventFilter;

    "FeeUpdated(uint256,uint256,address)"(
      _from?: null,
      _to?: null,
      _sender?: null
    ): FeeUpdatedEventFilter;
    FeeUpdated(_from?: null, _to?: null, _sender?: null): FeeUpdatedEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      _userAddress?: null,
      _relayerAddress?: null,
      _functionData?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      _userAddress?: null,
      _relayerAddress?: null,
      _functionData?: null
    ): MetaTransactionExecutedEventFilter;

    "OperatorUpdated(address,uint256,address,address)"(
      _contractAddress?: null,
      _tokenId?: null,
      _to?: null,
      _sender?: null
    ): OperatorUpdatedEventFilter;
    OperatorUpdated(
      _contractAddress?: null,
      _tokenId?: null,
      _to?: null,
      _sender?: null
    ): OperatorUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SignerNonceUpdated(uint256,uint256,address,address)"(
      _from?: null,
      _to?: null,
      _signer?: null,
      _sender?: null
    ): SignerNonceUpdatedEventFilter;
    SignerNonceUpdated(
      _from?: null,
      _to?: null,
      _signer?: null,
      _sender?: null
    ): SignerNonceUpdatedEventFilter;

    "TokenUpdated(address,address,address)"(
      _from?: null,
      _to?: null,
      _sender?: null
    ): TokenUpdatedEventFilter;
    TokenUpdated(
      _from?: null,
      _to?: null,
      _sender?: null
    ): TokenUpdatedEventFilter;
  };

  estimateGas: {
    acceptListing(
      _listing: Rentals.ListingStruct,
      _operator: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _rentalDays: PromiseOrValue<BigNumberish>,
      _fingerprint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptOffer(
      _offer: Rentals.OfferStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetNonce(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bumpAssetNonce(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bumpContractNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bumpSignerNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractNonce(overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      _userAddress: PromiseOrValue<string>,
      _functionData: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isRented(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rentals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signerNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptListing(
      _listing: Rentals.ListingStruct,
      _operator: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _rentalDays: PromiseOrValue<BigNumberish>,
      _fingerprint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptOffer(
      _offer: Rentals.OfferStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetNonce(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bumpAssetNonce(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bumpContractNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bumpSignerNonce(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      _userAddress: PromiseOrValue<string>,
      _functionData: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isRented(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      _operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rentals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _contractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signerNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
