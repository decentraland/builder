/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface DCLControllerInterface extends Interface {
  functions: {
    PRICE: TypedFunctionDescription<{ encode([]: []): string }>;

    acceptedToken: TypedFunctionDescription<{ encode([]: []): string }>;

    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    maxGasPrice: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    register: TypedFunctionDescription<{
      encode([_name, _beneficiary]: [string, string]): string;
    }>;

    registrar: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    updateMaxGasPrice: TypedFunctionDescription<{
      encode([_maxGasPrice]: [BigNumberish]): string;
    }>;
  };

  events: {
    MaxGasPriceChanged: TypedEventDescription<{
      encodeTopics([_oldMaxGasPrice, _newMaxGasPrice]: [
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    NameBought: TypedEventDescription<{
      encodeTopics([_caller, _beneficiary, _price, _name]: [
        string | null,
        string | null,
        null,
        null
      ]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class DCLController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): DCLController;
  attach(addressOrName: string): DCLController;
  deployed(): Promise<DCLController>;

  on(event: EventFilter | string, listener: Listener): DCLController;
  once(event: EventFilter | string, listener: Listener): DCLController;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): DCLController;
  removeAllListeners(eventName: EventFilter | string): DCLController;
  removeListener(eventName: any, listener: Listener): DCLController;

  interface: DCLControllerInterface;

  functions: {
    PRICE(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "PRICE()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    acceptedToken(overrides?: UnsignedTransaction): Promise<string>;

    "acceptedToken()"(overrides?: UnsignedTransaction): Promise<string>;

    isOwner(overrides?: UnsignedTransaction): Promise<boolean>;

    "isOwner()"(overrides?: UnsignedTransaction): Promise<boolean>;

    maxGasPrice(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "maxGasPrice()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    register(
      _name: string,
      _beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "register(string,address)"(
      _name: string,
      _beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    registrar(overrides?: UnsignedTransaction): Promise<string>;

    "registrar()"(overrides?: UnsignedTransaction): Promise<string>;

    renounceOwnership(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    updateMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "updateMaxGasPrice(uint256)"(
      _maxGasPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  PRICE(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "PRICE()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  acceptedToken(overrides?: UnsignedTransaction): Promise<string>;

  "acceptedToken()"(overrides?: UnsignedTransaction): Promise<string>;

  isOwner(overrides?: UnsignedTransaction): Promise<boolean>;

  "isOwner()"(overrides?: UnsignedTransaction): Promise<boolean>;

  maxGasPrice(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "maxGasPrice()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  register(
    _name: string,
    _beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "register(string,address)"(
    _name: string,
    _beneficiary: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  registrar(overrides?: UnsignedTransaction): Promise<string>;

  "registrar()"(overrides?: UnsignedTransaction): Promise<string>;

  renounceOwnership(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  updateMaxGasPrice(
    _maxGasPrice: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "updateMaxGasPrice(uint256)"(
    _maxGasPrice: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {
    MaxGasPriceChanged(
      _oldMaxGasPrice: BigNumberish | null,
      _newMaxGasPrice: BigNumberish | null
    ): EventFilter;

    NameBought(
      _caller: string | null,
      _beneficiary: string | null,
      _price: null,
      _name: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    PRICE(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "PRICE()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    acceptedToken(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "acceptedToken()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    isOwner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "isOwner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    maxGasPrice(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "maxGasPrice()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    register(
      _name: string,
      _beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "register(string,address)"(
      _name: string,
      _beneficiary: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    registrar(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "registrar()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    renounceOwnership(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    updateMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "updateMaxGasPrice(uint256)"(
      _maxGasPrice: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
