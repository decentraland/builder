/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ThirdPartyRegistryV3 {
  export type ThirdPartyParamStruct = {
    id: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
    resolver: PromiseOrValue<string>;
    managers: PromiseOrValue<string>[];
    managerValues: PromiseOrValue<boolean>[];
    slots: PromiseOrValue<BigNumberish>;
  };

  export type ThirdPartyParamStructOutput = [
    string,
    string,
    string,
    string[],
    boolean[],
    BigNumber
  ] & {
    id: string;
    metadata: string;
    resolver: string;
    managers: string[];
    managerValues: boolean[];
    slots: BigNumber;
  };

  export type ConsumeSlotsParamStruct = {
    qty: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BytesLike>;
    sigR: PromiseOrValue<BytesLike>;
    sigS: PromiseOrValue<BytesLike>;
    sigV: PromiseOrValue<BigNumberish>;
  };

  export type ConsumeSlotsParamStructOutput = [
    BigNumber,
    string,
    string,
    string,
    number
  ] & {
    qty: BigNumber;
    salt: string;
    sigR: string;
    sigS: string;
    sigV: number;
  };

  export type ItemStruct = {
    metadata: PromiseOrValue<string>;
    contentHash: PromiseOrValue<string>;
    isApproved: PromiseOrValue<boolean>;
    registered: PromiseOrValue<BigNumberish>;
  };

  export type ItemStructOutput = [string, string, boolean, BigNumber] & {
    metadata: string;
    contentHash: string;
    isApproved: boolean;
    registered: BigNumber;
  };

  export type ItemReviewParamStruct = {
    id: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
    contentHash: PromiseOrValue<string>;
    value: PromiseOrValue<boolean>;
  };

  export type ItemReviewParamStructOutput = [
    string,
    string,
    string,
    boolean
  ] & { id: string; metadata: string; contentHash: string; value: boolean };

  export type ThirdPartyReviewParamStruct = {
    id: PromiseOrValue<string>;
    value: PromiseOrValue<boolean>;
    items: ThirdPartyRegistryV3.ItemReviewParamStruct[];
  };

  export type ThirdPartyReviewParamStructOutput = [
    string,
    boolean,
    ThirdPartyRegistryV3.ItemReviewParamStructOutput[]
  ] & {
    id: string;
    value: boolean;
    items: ThirdPartyRegistryV3.ItemReviewParamStructOutput[];
  };
}

export interface ThirdPartyRegistryInterface extends utils.Interface {
  functions: {
    "acceptedToken()": FunctionFragment;
    "addThirdParties((string,string,string,address[],bool[],uint256)[],bool[],uint256[])": FunctionFragment;
    "buyItemSlots(string,uint256,uint256)": FunctionFragment;
    "committee()": FunctionFragment;
    "consumeSlots(string,(uint256,bytes32,bytes32,bytes32,uint8)[])": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "feesCollector()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getRuleValue(string,string)": FunctionFragment;
    "initialItemValue()": FunctionFragment;
    "initialThirdPartyValue()": FunctionFragment;
    "initialize(address,address,address,address,address,address,uint256)": FunctionFragment;
    "isThirdPartyManager(string,address)": FunctionFragment;
    "isThirdPartyProgrammatic(string)": FunctionFragment;
    "itemIdByIndex(string,uint256)": FunctionFragment;
    "itemSlotPrice()": FunctionFragment;
    "itemsById(string,string)": FunctionFragment;
    "itemsCount(string)": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "programmaticBasePurchasedSlots()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reviewThirdParties((string,bool,(string,string,string,bool)[])[])": FunctionFragment;
    "reviewThirdPartyWithRoot(string,bytes32,(uint256,bytes32,bytes32,bytes32,uint8)[])": FunctionFragment;
    "setAcceptedToken(address)": FunctionFragment;
    "setCommittee(address)": FunctionFragment;
    "setFeesCollector(address)": FunctionFragment;
    "setInitialItemValue(bool)": FunctionFragment;
    "setInitialThirdPartyValue(bool)": FunctionFragment;
    "setItemSlotPrice(uint256)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setProgrammaticBasePurchasedSlots(uint256)": FunctionFragment;
    "setRules(string,string[],bool[])": FunctionFragment;
    "setThirdPartyAggregator(address)": FunctionFragment;
    "thirdParties(string)": FunctionFragment;
    "thirdPartiesCount()": FunctionFragment;
    "thirdPartyAggregator()": FunctionFragment;
    "thirdPartyIds(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateThirdParties((string,string,string,address[],bool[],uint256)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptedToken"
      | "addThirdParties"
      | "buyItemSlots"
      | "committee"
      | "consumeSlots"
      | "domainSeparator"
      | "executeMetaTransaction"
      | "feesCollector"
      | "getChainId"
      | "getNonce"
      | "getRuleValue"
      | "initialItemValue"
      | "initialThirdPartyValue"
      | "initialize"
      | "isThirdPartyManager"
      | "isThirdPartyProgrammatic"
      | "itemIdByIndex"
      | "itemSlotPrice"
      | "itemsById"
      | "itemsCount"
      | "oracle"
      | "owner"
      | "programmaticBasePurchasedSlots"
      | "renounceOwnership"
      | "reviewThirdParties"
      | "reviewThirdPartyWithRoot"
      | "setAcceptedToken"
      | "setCommittee"
      | "setFeesCollector"
      | "setInitialItemValue"
      | "setInitialThirdPartyValue"
      | "setItemSlotPrice"
      | "setOracle"
      | "setProgrammaticBasePurchasedSlots"
      | "setRules"
      | "setThirdPartyAggregator"
      | "thirdParties"
      | "thirdPartiesCount"
      | "thirdPartyAggregator"
      | "thirdPartyIds"
      | "transferOwnership"
      | "updateThirdParties"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addThirdParties",
    values: [
      ThirdPartyRegistryV3.ThirdPartyParamStruct[],
      PromiseOrValue<boolean>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyItemSlots",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "committee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "consumeSlots",
    values: [
      PromiseOrValue<string>,
      ThirdPartyRegistryV3.ConsumeSlotsParamStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feesCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRuleValue",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialItemValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialThirdPartyValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isThirdPartyManager",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isThirdPartyProgrammatic",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "itemIdByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "itemSlotPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "itemsById",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "itemsCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "programmaticBasePurchasedSlots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewThirdParties",
    values: [ThirdPartyRegistryV3.ThirdPartyReviewParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewThirdPartyWithRoot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      ThirdPartyRegistryV3.ConsumeSlotsParamStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAcceptedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommittee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialItemValue",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialThirdPartyValue",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setItemSlotPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProgrammaticBasePurchasedSlots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRules",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setThirdPartyAggregator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "thirdParties",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "thirdPartiesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "thirdPartyAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "thirdPartyIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateThirdParties",
    values: [ThirdPartyRegistryV3.ThirdPartyParamStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addThirdParties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyItemSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "committee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consumeSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRuleValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialItemValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialThirdPartyValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isThirdPartyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isThirdPartyProgrammatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemIdByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemSlotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "itemsById", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemsCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "programmaticBasePurchasedSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewThirdParties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewThirdPartyWithRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAcceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialItemValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialThirdPartyValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setItemSlotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProgrammaticBasePurchasedSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setThirdPartyAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thirdParties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thirdPartiesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thirdPartyAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thirdPartyIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateThirdParties",
    data: BytesLike
  ): Result;

  events: {
    "AcceptedTokenSet(address,address)": EventFragment;
    "CommitteeSet(address,address)": EventFragment;
    "FeesCollectorSet(address,address)": EventFragment;
    "InitialItemValueSet(bool,bool)": EventFragment;
    "InitialThirdPartyValueSet(bool,bool)": EventFragment;
    "ItemReviewed(string,string,string,string,bool,address)": EventFragment;
    "ItemSlotPriceSet(uint256,uint256)": EventFragment;
    "ItemSlotsConsumed(string,uint256,address,bytes32,address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OracleSet(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProgrammaticBasePurchasedSlotsSet(uint256,uint256)": EventFragment;
    "ThirdPartyAdded(string,string,string,bool,address[],uint256,bool,address)": EventFragment;
    "ThirdPartyAggregatorSet(address,address)": EventFragment;
    "ThirdPartyItemSlotsBought(string,uint256,uint256,address)": EventFragment;
    "ThirdPartyReviewed(string,bool,address)": EventFragment;
    "ThirdPartyReviewedWithRoot(string,bytes32,bool,address)": EventFragment;
    "ThirdPartyRuleAdded(string,string,bool,address)": EventFragment;
    "ThirdPartyUpdated(string,string,string,address[],bool[],uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptedTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitteeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesCollectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitialItemValueSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitialThirdPartyValueSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemReviewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSlotPriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSlotsConsumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProgrammaticBasePurchasedSlotsSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThirdPartyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThirdPartyAggregatorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThirdPartyItemSlotsBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThirdPartyReviewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThirdPartyReviewedWithRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThirdPartyRuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThirdPartyUpdated"): EventFragment;
}

export interface AcceptedTokenSetEventObject {
  _oldAcceptedToken: string;
  _newAcceptedToken: string;
}
export type AcceptedTokenSetEvent = TypedEvent<
  [string, string],
  AcceptedTokenSetEventObject
>;

export type AcceptedTokenSetEventFilter =
  TypedEventFilter<AcceptedTokenSetEvent>;

export interface CommitteeSetEventObject {
  _oldCommittee: string;
  _newCommittee: string;
}
export type CommitteeSetEvent = TypedEvent<
  [string, string],
  CommitteeSetEventObject
>;

export type CommitteeSetEventFilter = TypedEventFilter<CommitteeSetEvent>;

export interface FeesCollectorSetEventObject {
  _oldFeesCollector: string;
  _newFeesCollector: string;
}
export type FeesCollectorSetEvent = TypedEvent<
  [string, string],
  FeesCollectorSetEventObject
>;

export type FeesCollectorSetEventFilter =
  TypedEventFilter<FeesCollectorSetEvent>;

export interface InitialItemValueSetEventObject {
  _oldInitialItemValue: boolean;
  _newInitialItemValue: boolean;
}
export type InitialItemValueSetEvent = TypedEvent<
  [boolean, boolean],
  InitialItemValueSetEventObject
>;

export type InitialItemValueSetEventFilter =
  TypedEventFilter<InitialItemValueSetEvent>;

export interface InitialThirdPartyValueSetEventObject {
  _oldInitialThirdPartyValue: boolean;
  _newInitialThirdPartyValue: boolean;
}
export type InitialThirdPartyValueSetEvent = TypedEvent<
  [boolean, boolean],
  InitialThirdPartyValueSetEventObject
>;

export type InitialThirdPartyValueSetEventFilter =
  TypedEventFilter<InitialThirdPartyValueSetEvent>;

export interface ItemReviewedEventObject {
  _thirdPartyId: string;
  _itemId: string;
  _metadata: string;
  _contentHash: string;
  _value: boolean;
  _sender: string;
}
export type ItemReviewedEvent = TypedEvent<
  [string, string, string, string, boolean, string],
  ItemReviewedEventObject
>;

export type ItemReviewedEventFilter = TypedEventFilter<ItemReviewedEvent>;

export interface ItemSlotPriceSetEventObject {
  _oldItemSlotPrice: BigNumber;
  _newItemSlotPrice: BigNumber;
}
export type ItemSlotPriceSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ItemSlotPriceSetEventObject
>;

export type ItemSlotPriceSetEventFilter =
  TypedEventFilter<ItemSlotPriceSetEvent>;

export interface ItemSlotsConsumedEventObject {
  _thirdPartyId: string;
  _qty: BigNumber;
  _signer: string;
  _messageHash: string;
  _sender: string;
}
export type ItemSlotsConsumedEvent = TypedEvent<
  [string, BigNumber, string, string, string],
  ItemSlotsConsumedEventObject
>;

export type ItemSlotsConsumedEventFilter =
  TypedEventFilter<ItemSlotsConsumedEvent>;

export interface MetaTransactionExecutedEventObject {
  userAddress: string;
  relayerAddress: string;
  functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface OracleSetEventObject {
  _oldOracle: string;
  _newOracle: string;
}
export type OracleSetEvent = TypedEvent<[string, string], OracleSetEventObject>;

export type OracleSetEventFilter = TypedEventFilter<OracleSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProgrammaticBasePurchasedSlotsSetEventObject {
  _oldProgrammaticBasePurchasedSlots: BigNumber;
  _newProgrammaticBasePurchasedSlots: BigNumber;
}
export type ProgrammaticBasePurchasedSlotsSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProgrammaticBasePurchasedSlotsSetEventObject
>;

export type ProgrammaticBasePurchasedSlotsSetEventFilter =
  TypedEventFilter<ProgrammaticBasePurchasedSlotsSetEvent>;

export interface ThirdPartyAddedEventObject {
  _thirdPartyId: string;
  _metadata: string;
  _resolver: string;
  _isApproved: boolean;
  _managers: string[];
  _itemSlots: BigNumber;
  _isProgrammatic: boolean;
  _sender: string;
}
export type ThirdPartyAddedEvent = TypedEvent<
  [string, string, string, boolean, string[], BigNumber, boolean, string],
  ThirdPartyAddedEventObject
>;

export type ThirdPartyAddedEventFilter = TypedEventFilter<ThirdPartyAddedEvent>;

export interface ThirdPartyAggregatorSetEventObject {
  _oldThirdPartyAggregator: string;
  _newThirdPartyAggregator: string;
}
export type ThirdPartyAggregatorSetEvent = TypedEvent<
  [string, string],
  ThirdPartyAggregatorSetEventObject
>;

export type ThirdPartyAggregatorSetEventFilter =
  TypedEventFilter<ThirdPartyAggregatorSetEvent>;

export interface ThirdPartyItemSlotsBoughtEventObject {
  _thirdPartyId: string;
  _price: BigNumber;
  _value: BigNumber;
  _sender: string;
}
export type ThirdPartyItemSlotsBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  ThirdPartyItemSlotsBoughtEventObject
>;

export type ThirdPartyItemSlotsBoughtEventFilter =
  TypedEventFilter<ThirdPartyItemSlotsBoughtEvent>;

export interface ThirdPartyReviewedEventObject {
  _thirdPartyId: string;
  _value: boolean;
  _sender: string;
}
export type ThirdPartyReviewedEvent = TypedEvent<
  [string, boolean, string],
  ThirdPartyReviewedEventObject
>;

export type ThirdPartyReviewedEventFilter =
  TypedEventFilter<ThirdPartyReviewedEvent>;

export interface ThirdPartyReviewedWithRootEventObject {
  _thirdPartyId: string;
  _root: string;
  _isApproved: boolean;
  _sender: string;
}
export type ThirdPartyReviewedWithRootEvent = TypedEvent<
  [string, string, boolean, string],
  ThirdPartyReviewedWithRootEventObject
>;

export type ThirdPartyReviewedWithRootEventFilter =
  TypedEventFilter<ThirdPartyReviewedWithRootEvent>;

export interface ThirdPartyRuleAddedEventObject {
  _thirdPartyId: string;
  _rule: string;
  _value: boolean;
  _sender: string;
}
export type ThirdPartyRuleAddedEvent = TypedEvent<
  [string, string, boolean, string],
  ThirdPartyRuleAddedEventObject
>;

export type ThirdPartyRuleAddedEventFilter =
  TypedEventFilter<ThirdPartyRuleAddedEvent>;

export interface ThirdPartyUpdatedEventObject {
  _thirdPartyId: string;
  _metadata: string;
  _resolver: string;
  _managers: string[];
  _managerValues: boolean[];
  _itemSlots: BigNumber;
  _sender: string;
}
export type ThirdPartyUpdatedEvent = TypedEvent<
  [string, string, string, string[], boolean[], BigNumber, string],
  ThirdPartyUpdatedEventObject
>;

export type ThirdPartyUpdatedEventFilter =
  TypedEventFilter<ThirdPartyUpdatedEvent>;

export interface ThirdPartyRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThirdPartyRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptedToken(overrides?: CallOverrides): Promise<[string]>;

    addThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyParamStruct[],
      _areProgrammatic: PromiseOrValue<boolean>[],
      _maxPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyItemSlots(
      _thirdPartyId: PromiseOrValue<string>,
      _qty: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    committee(overrides?: CallOverrides): Promise<[string]>;

    consumeSlots(
      _thirdPartyId: PromiseOrValue<string>,
      _consumeSlotsParams: ThirdPartyRegistryV3.ConsumeSlotsParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    getRuleValue(
      _thirdPartyId: PromiseOrValue<string>,
      _rule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialItemValue(overrides?: CallOverrides): Promise<[boolean]>;

    initialThirdPartyValue(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _thirdPartyAggregator: PromiseOrValue<string>,
      _feesCollector: PromiseOrValue<string>,
      _committee: PromiseOrValue<string>,
      _acceptedToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _itemSlotPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isThirdPartyManager(
      _thirdPartyId: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isThirdPartyProgrammatic(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    itemIdByIndex(
      _thirdPartyId: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    itemSlotPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    itemsById(
      _thirdPartyId: PromiseOrValue<string>,
      _itemId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ThirdPartyRegistryV3.ItemStructOutput]>;

    itemsCount(
      _thirdPartyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    programmaticBasePurchasedSlots(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviewThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyReviewParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviewThirdPartyWithRoot(
      _thirdPartyId: PromiseOrValue<string>,
      _root: PromiseOrValue<BytesLike>,
      _consumeSlotsParams: ThirdPartyRegistryV3.ConsumeSlotsParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAcceptedToken(
      _newAcceptedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCommittee(
      _newCommittee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInitialItemValue(
      _newinitialItemValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInitialThirdPartyValue(
      _newinitialThirdPartyValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setItemSlotPrice(
      _newItemSlotPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProgrammaticBasePurchasedSlots(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRules(
      _thirdPartyId: PromiseOrValue<string>,
      _rules: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setThirdPartyAggregator(
      _newThirdPartyAggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    thirdParties(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, BigNumber, string, string] & {
        isApproved: boolean;
        root: string;
        maxItems: BigNumber;
        consumedSlots: BigNumber;
        registered: BigNumber;
        metadata: string;
        resolver: string;
      }
    >;

    thirdPartiesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    thirdPartyAggregator(overrides?: CallOverrides): Promise<[string]>;

    thirdPartyIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptedToken(overrides?: CallOverrides): Promise<string>;

  addThirdParties(
    _thirdParties: ThirdPartyRegistryV3.ThirdPartyParamStruct[],
    _areProgrammatic: PromiseOrValue<boolean>[],
    _maxPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyItemSlots(
    _thirdPartyId: PromiseOrValue<string>,
    _qty: PromiseOrValue<BigNumberish>,
    _maxPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  committee(overrides?: CallOverrides): Promise<string>;

  consumeSlots(
    _thirdPartyId: PromiseOrValue<string>,
    _consumeSlotsParams: ThirdPartyRegistryV3.ConsumeSlotsParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  executeMetaTransaction(
    userAddress: PromiseOrValue<string>,
    functionSignature: PromiseOrValue<BytesLike>,
    sigR: PromiseOrValue<BytesLike>,
    sigS: PromiseOrValue<BytesLike>,
    sigV: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feesCollector(overrides?: CallOverrides): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getNonce(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRuleValue(
    _thirdPartyId: PromiseOrValue<string>,
    _rule: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialItemValue(overrides?: CallOverrides): Promise<boolean>;

  initialThirdPartyValue(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _owner: PromiseOrValue<string>,
    _thirdPartyAggregator: PromiseOrValue<string>,
    _feesCollector: PromiseOrValue<string>,
    _committee: PromiseOrValue<string>,
    _acceptedToken: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _itemSlotPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isThirdPartyManager(
    _thirdPartyId: PromiseOrValue<string>,
    _manager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isThirdPartyProgrammatic(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  itemIdByIndex(
    _thirdPartyId: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  itemSlotPrice(overrides?: CallOverrides): Promise<BigNumber>;

  itemsById(
    _thirdPartyId: PromiseOrValue<string>,
    _itemId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ThirdPartyRegistryV3.ItemStructOutput>;

  itemsCount(
    _thirdPartyId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  programmaticBasePurchasedSlots(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviewThirdParties(
    _thirdParties: ThirdPartyRegistryV3.ThirdPartyReviewParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviewThirdPartyWithRoot(
    _thirdPartyId: PromiseOrValue<string>,
    _root: PromiseOrValue<BytesLike>,
    _consumeSlotsParams: ThirdPartyRegistryV3.ConsumeSlotsParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAcceptedToken(
    _newAcceptedToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCommittee(
    _newCommittee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeesCollector(
    _newFeesCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInitialItemValue(
    _newinitialItemValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInitialThirdPartyValue(
    _newinitialThirdPartyValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setItemSlotPrice(
    _newItemSlotPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _newOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProgrammaticBasePurchasedSlots(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRules(
    _thirdPartyId: PromiseOrValue<string>,
    _rules: PromiseOrValue<string>[],
    _values: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setThirdPartyAggregator(
    _newThirdPartyAggregator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  thirdParties(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, BigNumber, string, string] & {
      isApproved: boolean;
      root: string;
      maxItems: BigNumber;
      consumedSlots: BigNumber;
      registered: BigNumber;
      metadata: string;
      resolver: string;
    }
  >;

  thirdPartiesCount(overrides?: CallOverrides): Promise<BigNumber>;

  thirdPartyAggregator(overrides?: CallOverrides): Promise<string>;

  thirdPartyIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateThirdParties(
    _thirdParties: ThirdPartyRegistryV3.ThirdPartyParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptedToken(overrides?: CallOverrides): Promise<string>;

    addThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyParamStruct[],
      _areProgrammatic: PromiseOrValue<boolean>[],
      _maxPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    buyItemSlots(
      _thirdPartyId: PromiseOrValue<string>,
      _qty: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    committee(overrides?: CallOverrides): Promise<string>;

    consumeSlots(
      _thirdPartyId: PromiseOrValue<string>,
      _consumeSlotsParams: ThirdPartyRegistryV3.ConsumeSlotsParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    feesCollector(overrides?: CallOverrides): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRuleValue(
      _thirdPartyId: PromiseOrValue<string>,
      _rule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialItemValue(overrides?: CallOverrides): Promise<boolean>;

    initialThirdPartyValue(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _owner: PromiseOrValue<string>,
      _thirdPartyAggregator: PromiseOrValue<string>,
      _feesCollector: PromiseOrValue<string>,
      _committee: PromiseOrValue<string>,
      _acceptedToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _itemSlotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isThirdPartyManager(
      _thirdPartyId: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isThirdPartyProgrammatic(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    itemIdByIndex(
      _thirdPartyId: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    itemSlotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    itemsById(
      _thirdPartyId: PromiseOrValue<string>,
      _itemId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ThirdPartyRegistryV3.ItemStructOutput>;

    itemsCount(
      _thirdPartyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    programmaticBasePurchasedSlots(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reviewThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyReviewParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    reviewThirdPartyWithRoot(
      _thirdPartyId: PromiseOrValue<string>,
      _root: PromiseOrValue<BytesLike>,
      _consumeSlotsParams: ThirdPartyRegistryV3.ConsumeSlotsParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAcceptedToken(
      _newAcceptedToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommittee(
      _newCommittee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialItemValue(
      _newinitialItemValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialThirdPartyValue(
      _newinitialThirdPartyValue: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setItemSlotPrice(
      _newItemSlotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(
      _newOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProgrammaticBasePurchasedSlots(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRules(
      _thirdPartyId: PromiseOrValue<string>,
      _rules: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setThirdPartyAggregator(
      _newThirdPartyAggregator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    thirdParties(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, BigNumber, string, string] & {
        isApproved: boolean;
        root: string;
        maxItems: BigNumber;
        consumedSlots: BigNumber;
        registered: BigNumber;
        metadata: string;
        resolver: string;
      }
    >;

    thirdPartiesCount(overrides?: CallOverrides): Promise<BigNumber>;

    thirdPartyAggregator(overrides?: CallOverrides): Promise<string>;

    thirdPartyIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AcceptedTokenSet(address,address)"(
      _oldAcceptedToken?: PromiseOrValue<string> | null,
      _newAcceptedToken?: PromiseOrValue<string> | null
    ): AcceptedTokenSetEventFilter;
    AcceptedTokenSet(
      _oldAcceptedToken?: PromiseOrValue<string> | null,
      _newAcceptedToken?: PromiseOrValue<string> | null
    ): AcceptedTokenSetEventFilter;

    "CommitteeSet(address,address)"(
      _oldCommittee?: PromiseOrValue<string> | null,
      _newCommittee?: PromiseOrValue<string> | null
    ): CommitteeSetEventFilter;
    CommitteeSet(
      _oldCommittee?: PromiseOrValue<string> | null,
      _newCommittee?: PromiseOrValue<string> | null
    ): CommitteeSetEventFilter;

    "FeesCollectorSet(address,address)"(
      _oldFeesCollector?: PromiseOrValue<string> | null,
      _newFeesCollector?: PromiseOrValue<string> | null
    ): FeesCollectorSetEventFilter;
    FeesCollectorSet(
      _oldFeesCollector?: PromiseOrValue<string> | null,
      _newFeesCollector?: PromiseOrValue<string> | null
    ): FeesCollectorSetEventFilter;

    "InitialItemValueSet(bool,bool)"(
      _oldInitialItemValue?: null,
      _newInitialItemValue?: null
    ): InitialItemValueSetEventFilter;
    InitialItemValueSet(
      _oldInitialItemValue?: null,
      _newInitialItemValue?: null
    ): InitialItemValueSetEventFilter;

    "InitialThirdPartyValueSet(bool,bool)"(
      _oldInitialThirdPartyValue?: null,
      _newInitialThirdPartyValue?: null
    ): InitialThirdPartyValueSetEventFilter;
    InitialThirdPartyValueSet(
      _oldInitialThirdPartyValue?: null,
      _newInitialThirdPartyValue?: null
    ): InitialThirdPartyValueSetEventFilter;

    "ItemReviewed(string,string,string,string,bool,address)"(
      _thirdPartyId?: null,
      _itemId?: null,
      _metadata?: null,
      _contentHash?: null,
      _value?: null,
      _sender?: null
    ): ItemReviewedEventFilter;
    ItemReviewed(
      _thirdPartyId?: null,
      _itemId?: null,
      _metadata?: null,
      _contentHash?: null,
      _value?: null,
      _sender?: null
    ): ItemReviewedEventFilter;

    "ItemSlotPriceSet(uint256,uint256)"(
      _oldItemSlotPrice?: null,
      _newItemSlotPrice?: null
    ): ItemSlotPriceSetEventFilter;
    ItemSlotPriceSet(
      _oldItemSlotPrice?: null,
      _newItemSlotPrice?: null
    ): ItemSlotPriceSetEventFilter;

    "ItemSlotsConsumed(string,uint256,address,bytes32,address)"(
      _thirdPartyId?: null,
      _qty?: null,
      _signer?: PromiseOrValue<string> | null,
      _messageHash?: null,
      _sender?: PromiseOrValue<string> | null
    ): ItemSlotsConsumedEventFilter;
    ItemSlotsConsumed(
      _thirdPartyId?: null,
      _qty?: null,
      _signer?: PromiseOrValue<string> | null,
      _messageHash?: null,
      _sender?: PromiseOrValue<string> | null
    ): ItemSlotsConsumedEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "OracleSet(address,address)"(
      _oldOracle?: PromiseOrValue<string> | null,
      _newOracle?: PromiseOrValue<string> | null
    ): OracleSetEventFilter;
    OracleSet(
      _oldOracle?: PromiseOrValue<string> | null,
      _newOracle?: PromiseOrValue<string> | null
    ): OracleSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProgrammaticBasePurchasedSlotsSet(uint256,uint256)"(
      _oldProgrammaticBasePurchasedSlots?: null,
      _newProgrammaticBasePurchasedSlots?: null
    ): ProgrammaticBasePurchasedSlotsSetEventFilter;
    ProgrammaticBasePurchasedSlotsSet(
      _oldProgrammaticBasePurchasedSlots?: null,
      _newProgrammaticBasePurchasedSlots?: null
    ): ProgrammaticBasePurchasedSlotsSetEventFilter;

    "ThirdPartyAdded(string,string,string,bool,address[],uint256,bool,address)"(
      _thirdPartyId?: null,
      _metadata?: null,
      _resolver?: null,
      _isApproved?: null,
      _managers?: null,
      _itemSlots?: null,
      _isProgrammatic?: null,
      _sender?: null
    ): ThirdPartyAddedEventFilter;
    ThirdPartyAdded(
      _thirdPartyId?: null,
      _metadata?: null,
      _resolver?: null,
      _isApproved?: null,
      _managers?: null,
      _itemSlots?: null,
      _isProgrammatic?: null,
      _sender?: null
    ): ThirdPartyAddedEventFilter;

    "ThirdPartyAggregatorSet(address,address)"(
      _oldThirdPartyAggregator?: PromiseOrValue<string> | null,
      _newThirdPartyAggregator?: PromiseOrValue<string> | null
    ): ThirdPartyAggregatorSetEventFilter;
    ThirdPartyAggregatorSet(
      _oldThirdPartyAggregator?: PromiseOrValue<string> | null,
      _newThirdPartyAggregator?: PromiseOrValue<string> | null
    ): ThirdPartyAggregatorSetEventFilter;

    "ThirdPartyItemSlotsBought(string,uint256,uint256,address)"(
      _thirdPartyId?: null,
      _price?: null,
      _value?: null,
      _sender?: null
    ): ThirdPartyItemSlotsBoughtEventFilter;
    ThirdPartyItemSlotsBought(
      _thirdPartyId?: null,
      _price?: null,
      _value?: null,
      _sender?: null
    ): ThirdPartyItemSlotsBoughtEventFilter;

    "ThirdPartyReviewed(string,bool,address)"(
      _thirdPartyId?: null,
      _value?: null,
      _sender?: null
    ): ThirdPartyReviewedEventFilter;
    ThirdPartyReviewed(
      _thirdPartyId?: null,
      _value?: null,
      _sender?: null
    ): ThirdPartyReviewedEventFilter;

    "ThirdPartyReviewedWithRoot(string,bytes32,bool,address)"(
      _thirdPartyId?: null,
      _root?: null,
      _isApproved?: null,
      _sender?: null
    ): ThirdPartyReviewedWithRootEventFilter;
    ThirdPartyReviewedWithRoot(
      _thirdPartyId?: null,
      _root?: null,
      _isApproved?: null,
      _sender?: null
    ): ThirdPartyReviewedWithRootEventFilter;

    "ThirdPartyRuleAdded(string,string,bool,address)"(
      _thirdPartyId?: null,
      _rule?: null,
      _value?: null,
      _sender?: null
    ): ThirdPartyRuleAddedEventFilter;
    ThirdPartyRuleAdded(
      _thirdPartyId?: null,
      _rule?: null,
      _value?: null,
      _sender?: null
    ): ThirdPartyRuleAddedEventFilter;

    "ThirdPartyUpdated(string,string,string,address[],bool[],uint256,address)"(
      _thirdPartyId?: null,
      _metadata?: null,
      _resolver?: null,
      _managers?: null,
      _managerValues?: null,
      _itemSlots?: null,
      _sender?: null
    ): ThirdPartyUpdatedEventFilter;
    ThirdPartyUpdated(
      _thirdPartyId?: null,
      _metadata?: null,
      _resolver?: null,
      _managers?: null,
      _managerValues?: null,
      _itemSlots?: null,
      _sender?: null
    ): ThirdPartyUpdatedEventFilter;
  };

  estimateGas: {
    acceptedToken(overrides?: CallOverrides): Promise<BigNumber>;

    addThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyParamStruct[],
      _areProgrammatic: PromiseOrValue<boolean>[],
      _maxPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyItemSlots(
      _thirdPartyId: PromiseOrValue<string>,
      _qty: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    committee(overrides?: CallOverrides): Promise<BigNumber>;

    consumeSlots(
      _thirdPartyId: PromiseOrValue<string>,
      _consumeSlotsParams: ThirdPartyRegistryV3.ConsumeSlotsParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feesCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRuleValue(
      _thirdPartyId: PromiseOrValue<string>,
      _rule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialItemValue(overrides?: CallOverrides): Promise<BigNumber>;

    initialThirdPartyValue(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _thirdPartyAggregator: PromiseOrValue<string>,
      _feesCollector: PromiseOrValue<string>,
      _committee: PromiseOrValue<string>,
      _acceptedToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _itemSlotPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isThirdPartyManager(
      _thirdPartyId: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isThirdPartyProgrammatic(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemIdByIndex(
      _thirdPartyId: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemSlotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    itemsById(
      _thirdPartyId: PromiseOrValue<string>,
      _itemId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemsCount(
      _thirdPartyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    programmaticBasePurchasedSlots(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviewThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyReviewParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviewThirdPartyWithRoot(
      _thirdPartyId: PromiseOrValue<string>,
      _root: PromiseOrValue<BytesLike>,
      _consumeSlotsParams: ThirdPartyRegistryV3.ConsumeSlotsParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAcceptedToken(
      _newAcceptedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCommittee(
      _newCommittee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInitialItemValue(
      _newinitialItemValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInitialThirdPartyValue(
      _newinitialThirdPartyValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setItemSlotPrice(
      _newItemSlotPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracle(
      _newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProgrammaticBasePurchasedSlots(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRules(
      _thirdPartyId: PromiseOrValue<string>,
      _rules: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setThirdPartyAggregator(
      _newThirdPartyAggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    thirdParties(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thirdPartiesCount(overrides?: CallOverrides): Promise<BigNumber>;

    thirdPartyAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    thirdPartyIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyParamStruct[],
      _areProgrammatic: PromiseOrValue<boolean>[],
      _maxPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyItemSlots(
      _thirdPartyId: PromiseOrValue<string>,
      _qty: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    committee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consumeSlots(
      _thirdPartyId: PromiseOrValue<string>,
      _consumeSlotsParams: ThirdPartyRegistryV3.ConsumeSlotsParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRuleValue(
      _thirdPartyId: PromiseOrValue<string>,
      _rule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialItemValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialThirdPartyValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _thirdPartyAggregator: PromiseOrValue<string>,
      _feesCollector: PromiseOrValue<string>,
      _committee: PromiseOrValue<string>,
      _acceptedToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _itemSlotPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isThirdPartyManager(
      _thirdPartyId: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isThirdPartyProgrammatic(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemIdByIndex(
      _thirdPartyId: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemSlotPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itemsById(
      _thirdPartyId: PromiseOrValue<string>,
      _itemId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemsCount(
      _thirdPartyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    programmaticBasePurchasedSlots(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviewThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyReviewParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviewThirdPartyWithRoot(
      _thirdPartyId: PromiseOrValue<string>,
      _root: PromiseOrValue<BytesLike>,
      _consumeSlotsParams: ThirdPartyRegistryV3.ConsumeSlotsParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAcceptedToken(
      _newAcceptedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCommittee(
      _newCommittee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCollector(
      _newFeesCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInitialItemValue(
      _newinitialItemValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInitialThirdPartyValue(
      _newinitialThirdPartyValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setItemSlotPrice(
      _newItemSlotPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProgrammaticBasePurchasedSlots(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRules(
      _thirdPartyId: PromiseOrValue<string>,
      _rules: PromiseOrValue<string>[],
      _values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setThirdPartyAggregator(
      _newThirdPartyAggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    thirdParties(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thirdPartiesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    thirdPartyAggregator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thirdPartyIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateThirdParties(
      _thirdParties: ThirdPartyRegistryV3.ThirdPartyParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
